"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""Файл, хранящийся в хранилище файлов"""
interface File {
  """Идентификатор файла"""
  id: String!

  """Ссылка для отображения или скачивания файла"""
  url(
    """Сформировать ссылку на скачивание файла"""
    asAttachment: Boolean! = false

    """Вариант изображения"""
    variant: String
  ): String!
}

"""Файл, хранящийся в хранилище файлов"""
type FileInformation implements File {
  """Идентификатор файла"""
  id: String!

  """Ссылка для отображения или скачивания файла"""
  url(
    """Сформировать ссылку на скачивание файла"""
    asAttachment: Boolean! = false

    """Вариант изображения"""
    variant: String
  ): String!
}

"""Определяет наличие прикрепляемых документов"""
interface HaveDocuments {
  """Прикреплённые файлы-документы"""
  documents: [Document!]!
}

type Mutation {
  """Добавляет новое достижение с физическими призами"""
  addAchievementWithMaterialPrizes(input: AddAchievementWithMaterialPrizesInput!): AddAchievementWithMaterialPrizesPayload!

  """Добавляет новое достижение с промо-кодами в качестве призов"""
  addAchievementWithPromoCodes(input: AddAchievementWithPromoCodesInput!): AddAchievementWithPromoCodesPayload!

  """Добавляет новое достижение с неограниченным количеством наград"""
  addAchievementWithUnlimitedNumberOfPrizes(input: AddAchievementWithUnlimitedNumberOfPrizesInput!): AddAchievementWithUnlimitedNumberOfPrizesPayload!

  """Добавляет описание статус жертвователя"""
  addBenefactorStatus(input: AddBenefactorStatusInput!): AddBenefactorStatusPayload!

  """Добавить широковещательное уведомление"""
  addBroadcastNotification(input: AddBroadcastNotificationInput!): AddBroadcastNotificationPayload!

  """Добавляет новую категорию в список категорий"""
  addCategory(input: AddCategoryInput!): AddCategoryPayload!

  """Добавляет новый город в каталог городов."""
  addCity(input: AddCityInput!): AddCityPayload!

  """Добавляет информацию о версии клиентского приложения"""
  addClientVersion(input: AddClientVersionInput!): AddClientVersionPayload!

  """Добавляет фонд-партнёр в систему"""
  addFoundation(input: AddFoundationInput!): AddFoundationPayload!

  """Добавляет новое событие для указанного фонда-партнёра"""
  addFoundationEvent(input: AddFoundationEventInput!): AddFoundationEventPayload!

  """Добавить продуктовую корзину"""
  addGrocerySetNeed(input: AddGrocerySetNeedInput!): AddGrocerySetNeedPayload!

  """Добавить разовую потребность"""
  addOneTimeNeed(input: AddOneTimeNeedInput!): AddOneTimeNeedPayload!

  """Добавляет новый расход проекта за указанный период"""
  addProjectExpense(input: AddProjectExpenseInput!): AddProjectExpensePayload!

  """Добавляет новую историю к блоку историй."""
  addStory(
    """Параметры создания истории."""
    input: AddStoryInput!
  ): AddStoryPayload!

  """Создаёт новый блок историй."""
  addStoryBlock(
    """Параметры создания нового блока историй."""
    input: AddStoryBlockInput!
  ): AddStoryBlockPayload!

  """
  Добавляет идентификаторы просмотренных историй к списку идентификаторов просмотренных пользователем историй.
  """
  addViewedStories(
    """Параметры добавления идентификаторов просмотренных историй."""
    input: AddViewedStoriesInput!
  ): AddViewedStoriesPayload!

  """Добавление нового подопечного"""
  addWard(input: AddWardInput!): AddWardPayload!

  """Добавляет подопечного к списку подопечных счёта-депозита"""
  addWardsToTheBenefactorDepositAccountForSpecificWards(input: AddWardsToTheBenefactorDepositAccountForSpecificWardsInput!): AddWardsToTheBenefactorDepositAccountForSpecificWardsPayload!

  """Разрешить перенос подписки на другого подопечного"""
  allowSubscriptionTransfer(input: AllowSubscriptionTransferInput!): AllowSubscriptionTransferPayload!

  """
  Удалить персональные данные текущего пользователя. ВНИМАНИЕ: ЭТО НЕОБРАТИМАЯ ОПЕРАЦИЯ!
  """
  anonymizeBenefactor: AnonymizeBenefactorPayload!

  """Подать заявку на участие в событии фонда-партнёра"""
  applyToFoundationEvent(input: ApplyToFoundationEventInput!): ApplyToFoundationEventPayload!

  """Утвердить событие фонда-партнёра"""
  approveFoundationEvent(input: ApproveFoundationEventInput!): ApproveFoundationEventPayload!

  """Убрать потребность в архив"""
  archiveNeed(input: ArchiveNeedInput!): ArchiveNeedPayload!

  """Отменить событие фонда-партнёра"""
  cancelFoundationEvent(input: CancelFoundationEventInput!): CancelFoundationEventPayload!

  """Отменяет спецпроект"""
  cancelSpecialProject(input: CancelSpecialProjectInput!): CancelSpecialProjectPayload!

  """Отменить подписку с указанным идентификатором"""
  cancelSubscription(input: CancelSubscriptionInput!): CancelSubscriptionPayload!

  """Изменяет видимость профиля жертвователя"""
  changeBenefactorProfileVisibility(input: ChangeBenefactorProfileVisibilityInput!): ChangeBenefactorProfileVisibilityPayload!

  """Изменение номера телефона при наличии кода подтверждения"""
  changePhoneNumber(input: ChangePhoneNumberInput!): ChangePhoneNumberPayload!

  """Изменить номер телефона пользователя администратором платформы"""
  changePhoneNumberByAdministrator(input: ChangePhoneNumberByAdministratorInput!): ChangePhoneNumberByAdministratorPayload!

  """Инициирование смены номера телефона - получение кода подтверждения"""
  changePhoneNumberCode(input: ChangePhoneNumberCodeInput!): ChangePhoneNumberCodePayload!

  """Изменяет порядок следования историй в блоке."""
  changeStoriesOrder(
    """Параметры изменения порядка следования историй."""
    input: ChangeStoriesOrderInput!
  ): ChangeStoriesOrderPayload!

  """Изменение пароля учётной записи пользователя"""
  changeUserPassword(input: ChangeUserPasswordInput!): ChangeUserPasswordPayload!

  """Отметить участие в событии"""
  checkinToFoundationEvent(input: CheckinToFoundationEventInput!): CheckinToFoundationEventPayload!

  """Закрыть событие фонда-партнёра"""
  closeFoundationEvent(input: CloseFoundationEventInput!): CloseFoundationEventPayload!

  """Закрыть регистрацию на событие фонда-партнёра"""
  closeFoundationEventRegistration(input: CloseFoundationEventRegistrationInput!): CloseFoundationEventRegistrationPayload!

  """Закрывает спецпроект"""
  closeSpecialProject(input: CloseSpecialProjectInput!): CloseSpecialProjectPayload!

  """Подтверждение адреса электронной почты учётной записи"""
  confirmEmail(input: ConfirmEmailInput!): ConfirmEmailPayload!

  """Отметить участие в событии"""
  convertFoundationEventApplicationToAttendance(input: ConvertFoundationEventApplicationToAttendanceInput!): ConvertFoundationEventApplicationToAttendancePayload!

  """Регистрация нового жертвователя администратором платформы"""
  createBenefactor(input: CreateBenefactorInput!): CreateBenefactorPayload!

  """
  Создаёт счёт-депозит для указанного жертвователя, средства с которого могут расходоваться на потребности всех подопечных
  """
  createBenefactorDepositAccountForAllWards(input: CreateBenefactorDepositAccountForAllWardsInput!): CreateBenefactorDepositAccountForAllWardsPayload!

  """
  Создаёт счёт-депозит для указанного жертвователя, средства с которого могут расходоваться только на нужды проекта
  """
  createBenefactorDepositAccountForProjectNeeds(input: CreateBenefactorDepositAccountForProjectNeedsInput!): CreateBenefactorDepositAccountForProjectNeedsPayload!

  """
  Создаёт счёт-депозит для указанного жертвователя, средства с которого могут расходоваться на потребности конкретных подопечных
  """
  createBenefactorDepositAccountForSpecificWards(input: CreateBenefactorDepositAccountForSpecificWardsInput!): CreateBenefactorDepositAccountForSpecificWardsPayload!

  """
  Создаёт счёт-депозит для указанного жертвователя, средства с которого могут расходоваться на любые цели
  """
  createBenefactorDepositAccountWithoutConditions(input: CreateBenefactorDepositAccountWithoutConditionsInput!): CreateBenefactorDepositAccountWithoutConditionsPayload!

  """Создать учётную запись представителя фонда"""
  createFoundationRepresentative(input: CreateFoundationRepresentativeInput!): CreateFoundationRepresentativePayload!

  """Создание нового отчёта ООО"""
  createLimitedLiabilityCompanyReport(input: CreateLimitedLiabilityCompanyReportInput!): CreateLimitedLiabilityCompanyReportPayload!

  """Создать учётную запись модератора"""
  createModerator(input: CreateModeratorInput!): CreateModeratorPayload!

  """
  Создаёт и возвращает ссылку для регистрации с использованием кода пользователя
  """
  createReferrerLink: CreateReferrerLinkPayload!

  """Создаёт новый спецпроект."""
  createSpecialProject(input: CreateSpecialProjectInput!): CreateSpecialProjectPayload!

  """Создать учётную запись администратора"""
  createSystemAdministrator(input: CreateSystemAdministratorInput!): CreateSystemAdministratorPayload!

  """Запускает процедуру деактивации подопечного"""
  deactivateWard(input: DeactivateWardInput!): DeactivateWardPayload!

  """Отклонить заявку на участие в событии фонда-партнёра"""
  declineFoundationEventApplication(input: DeclineFoundationEventApplicationInput!): DeclineFoundationEventApplicationPayload!

  """Удаляет достижение"""
  deleteAchievement(input: DeleteAchievementInput!): DeleteAchievementPayload!

  """Удаляет описание статуса жертвователя"""
  deleteBenefactorStatus(input: DeleteBenefactorStatusInput!): DeleteBenefactorStatusPayload!

  """Удаляет категорию"""
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload!

  """Удаляет город."""
  deleteCity(input: DeleteCityInput!): DeleteCityPayload!

  """Удаляет историю."""
  deleteStory(
    """Параметры удаления истории."""
    input: DeleteStoryInput!
  ): DeleteStoryPayload!

  """Удаляет блок историй."""
  deleteStoryBlock(
    """Параметры удаления блока историй."""
    input: DeleteStoryBlockInput!
  ): DeleteStoryBlockPayload!

  """Удаление учётной записи пользователя"""
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!

  """Размещает депозит на счёте-депозите жертвователя"""
  depositToBenefactorAccount(
    """Параметры размещаемого депозита"""
    input: DepositToBenefactorAccountInput!
  ): DepositToBenefactorAccountPayload! @deprecated(reason: "Используйте мутацию placeOrder")

  """Запретить перенос подписок на указанного подопечного"""
  disableSubscriptionTransferToWard(input: DisableSubscriptionTransferToWardInput!): DisableSubscriptionTransferToWardPayload!

  """Блокировка или отмена блокировки учётной записи пользователя"""
  enableOrDisableUser(input: EnableOrDisableUserInput!): EnableOrDisableUserPayload!

  """Разрешить перенос подписок на указанного подопечного"""
  enableSubscriptionTransferToWard(input: EnableSubscriptionTransferToWardInput!): EnableSubscriptionTransferToWardPayload!

  """Запретить перенос подписки на другого подопечного"""
  forbidSubscriptionTransfer(input: ForbidSubscriptionTransferInput!): ForbidSubscriptionTransferPayload!

  """Запрос на сброс пароля"""
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordPayload!

  """Пометить все оповещения как прочтённые"""
  markAllNotificationsAsRead: MarkAllNotificationsAsReadPayload!

  """Отмечает достижение, как показанное жертвователю"""
  markBenefactorAchievementAsShown(input: MarkBenefactorAchievementAsShownInput!): MarkBenefactorAchievementAsShownPayload!

  """Отметить подопечного как не требующего немедленной помощи"""
  markWardAsNotRequiringImmediateHelp(input: MarkWardAsNotRequiringImmediateHelpInput!): MarkWardAsNotRequiringImmediateHelpPayload!

  """Отметить подопечного как требующего немедленной помощи"""
  markWardAsRequiringImmediateHelp(input: MarkWardAsRequiringImmediateHelpInput!): MarkWardAsRequiringImmediateHelpPayload!

  """Открыть регистрацию на событие фонда-партнёра"""
  openFoundationEventRegistration(input: OpenFoundationEventRegistrationInput!): OpenFoundationEventRegistrationPayload!

  """Получение кода подтверждения для входа по номеру телефона"""
  phoneLoginCode(input: PhoneLoginCodeInput!): PhoneLoginCodePayload!

  """Размещает новый заказ"""
  placeOrder(input: PlaceOrderInput!): PlaceOrderPayload!

  """Подготовка к загрузке файлов в хранилище"""
  prepareFilesUpload(input: PrepareFilesUploadInput!): PrepareFilesUploadPayload!

  """Отмечает достижение как опубликованное"""
  publishAchievement(input: PublishAchievementInput!): PublishAchievementPayload!

  """Публикация отчёта ООО"""
  publishLimitedLiabilityCompanyReport(input: PublishLimitedLiabilityCompanyReportInput!): PublishLimitedLiabilityCompanyReportPayload!

  """Публикует спецпроект"""
  publishSpecialProject(input: PublishSpecialProjectInput!): PublishSpecialProjectPayload!

  """Публикует историю."""
  publishStory(
    """Параметры публикации истории."""
    input: PublishStoryInput!
  ): PublishStoryPayload!

  """Сделать подопечного доступным для просмотра жертвователями"""
  publishWard(input: PublishWardInput!): PublishWardPayload!

  """Регистрирует мобильное устройство текущего пользователя"""
  registerDeviceToken(input: RegisterDeviceTokenInput!): RegisterDeviceTokenPayload!

  """Удаляет сохранённую платёжную карту."""
  removeSavedCloudPaymentsCard(input: RemoveSavedCloudPaymentsCardInput!): RemoveSavedCloudPaymentsCardPayload!

  """Удаляет подопечного из списка подопечных счёта-депозита"""
  removeWardFromTheBenefactorDepositAccountForSpecificWards(input: RemoveWardFromTheBenefactorDepositAccountForSpecificWardsInput!): RemoveWardFromTheBenefactorDepositAccountForSpecificWardsPayload!

  """Запросить утверждение события фонда-партнёра"""
  requestFoundationEventApproval(input: RequestFoundationEventApprovalInput!): RequestFoundationEventApprovalPayload!

  """Изменение пароля учётной записи"""
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!

  """Сохраняет результат дополнительной верификации платежа"""
  respondToPaymentChallenge(input: RespondToPaymentChallengeInput!): RespondToPaymentChallengePayload!

  """Запускает процедуру перевода подопечного в статус умершего"""
  restInPeace(input: RestInPeaceInput!): RestInPeacePayload!

  """Отозвать заявку на участие в событии фонда-партнёра"""
  revokeFoundationEventApplication(input: RevokeFoundationEventApplicationInput!): RevokeFoundationEventApplicationPayload!

  """Запускает формирование отчёта с указанным идентификатором."""
  runReport(input: RunReportInput!): RunReportPayload!

  """Отобрать заявку для участия в событии фонда-партнёра"""
  selectFoundationEventApplication(input: SelectFoundationEventApplicationInput!): SelectFoundationEventApplicationPayload!

  """Отправляет отчёт о выполнении разовой потребности"""
  sendOneTimeNeedReport(input: SendOneTimeNeedReportInput!): SendOneTimeNeedReportPayload!

  """Отправляет отчёт о расходе средств проектом"""
  sendProjectExpenseReport(input: SendProjectExpenseReportInput!): SendProjectExpenseReportPayload!

  """Отправляет отчёт о выполнении периода регулярной потребности"""
  sendRegularNeedPeriodReport(input: SendRegularNeedPeriodReportInput!): SendRegularNeedPeriodReportPayload!

  """Отправить отчёт о спецпроекте"""
  sendSpecialProjectReport(input: SendSpecialProjectReportInput!): SendSpecialProjectReportPayload!

  """Помечает сохранённую платёжную карту как карту по умолчанию."""
  setDefaultCloudPaymentsCard(input: SetDefaultCloudPaymentsCardInput!): SetDefaultCloudPaymentsCardPayload!

  """Назначить текущего пользователя ответственным за событие"""
  takeFoundationEventOwnership(input: TakeFoundationEventOwnershipInput!): TakeFoundationEventOwnershipPayload!

  """Переводит средства между счетами"""
  transferFundsToAccount(input: TransferFundsToAccountInput!): TransferFundsToAccountPayload!

  """Отмечает достижение как неопубликованное"""
  unpublishAchievement(input: UnpublishAchievementInput!): UnpublishAchievementPayload!

  """Снимает спецпроект с публикации"""
  unpublishSpecialProject(input: UnpublishSpecialProjectInput!): UnpublishSpecialProjectPayload!

  """Отменяет публикацию истории."""
  unpublishStory(
    """Параметры отмены публикации."""
    input: UnpublishStoryInput!
  ): UnpublishStoryPayload!

  """Сделать подопечного недоступным для просмотра жертвователями"""
  unpublishWard(input: UnpublishWardInput!): UnpublishWardPayload!

  """Удаляет регистрацию мобильного устройства текущего пользователя"""
  unregisterDeviceToken: UnregisterDeviceTokenPayload!

  """Обновляет достижение с физическими призами"""
  updateAchievementWithMaterialPrizes(input: UpdateAchievementWithMaterialPrizesInput!): UpdateAchievementWithMaterialPrizesPayload!

  """Обновляет достижение с промо-кодами в качестве призов"""
  updateAchievementWithPromoCodes(input: UpdateAchievementWithPromoCodesInput!): UpdateAchievementWithPromoCodesPayload!

  """Обновляет достижение с неограниченным количеством наград"""
  updateAchievementWithUnlimitedNumberOfPrizes(input: UpdateAchievementWithUnlimitedNumberOfPrizesInput!): UpdateAchievementWithUnlimitedNumberOfPrizesPayload!

  """Регистрация или изменение информации о жертвователе"""
  updateBenefactor(input: UpdateBenefactorInput!): UpdateBenefactorPayload!

  """Изменить базовую информацию жертвователя администратором платформы"""
  updateBenefactorByAdministrator(input: UpdateBenefactorByAdministratorInput!): UpdateBenefactorByAdministratorPayload!

  """Изменяет список городов, за которыми следит жертвователь"""
  updateBenefactorCitiesOfInterest(input: UpdateBenefactorCitiesOfInterestInput!): UpdateBenefactorCitiesOfInterestPayload!

  """
  Изменяет данные счёта-депозита жертвователя, средства с которого могут расходоваться только на нужды указанных подопечных
  """
  updateBenefactorDepositAccountForSpecificWards(input: UpdateBenefactorDepositAccountForSpecificWardsInput!): UpdateBenefactorDepositAccountForSpecificWardsPayload!

  """Изменяет адрес электронной почты жертвователя"""
  updateBenefactorEmail(input: UpdateBenefactorEmailInput!): UpdateBenefactorEmailPayload!

  """
  Изменить адрес электронной почты жертвователя администратором платформы
  """
  updateBenefactorEmailByAdministrator(input: UpdateBenefactorEmailByAdministratorInput!): UpdateBenefactorEmailByAdministratorPayload!

  """Изменяет персональные данные жертвователя"""
  updateBenefactorPersonalData(input: UpdateBenefactorPersonalDataInput!): UpdateBenefactorPersonalDataPayload!

  """Изменяет персональные данные жертвователя администратором платформы"""
  updateBenefactorPersonalDataByAdministrator(input: UpdateBenefactorPersonalDataByAdministratorInput!): UpdateBenefactorPersonalDataByAdministratorPayload!

  """Изменяет список навыков жертвователя"""
  updateBenefactorSkillsInformation(input: UpdateBenefactorSkillsInformationInput!): UpdateBenefactorSkillsInformationPayload!

  """Изменяет список навыков жертвователя администратором платформы"""
  updateBenefactorSkillsInformationByAdministrator(input: UpdateBenefactorSkillsInformationByAdministratorInput!): UpdateBenefactorSkillsInformationByAdministratorPayload!

  """Изменяет описание статуса жертвователя"""
  updateBenefactorStatus(input: UpdateBenefactorStatusInput!): UpdateBenefactorStatusPayload!

  """Изменяет информацию о волонтёрском опыте жертвователя"""
  updateBenefactorVolunteerInformation(input: UpdateBenefactorVolunteerInformationInput!): UpdateBenefactorVolunteerInformationPayload!

  """
  Изменяет информацию о волонтёрском опыте жертвователя администратором платформы
  """
  updateBenefactorVolunteerInformationByAdministrator(input: UpdateBenefactorVolunteerInformationByAdministratorInput!): UpdateBenefactorVolunteerInformationByAdministratorPayload!

  """Изменяет порядок категорий"""
  updateCategoriesOrder(input: UpdateCategoriesOrderInput!): UpdateCategoriesOrderPayload!

  """Обновляет данные категории"""
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload!

  """Изменяет название города."""
  updateCity(input: UpdateCityInput!): UpdateCityPayload!

  """Обновляет количество монет, о которых сообщалось пользователю"""
  updateCoinsAccountedByClient(input: UpdateCoinsAccountedByClientInput!): UpdateCoinsAccountedByClientPayload!

  """Изменяет информацию о фонде-партнёре"""
  updateFoundation(input: UpdateFoundationInput!): UpdateFoundationPayload!

  """Изменяет данные события фонда-партнёра"""
  updateFoundationEvent(input: UpdateFoundationEventInput!): UpdateFoundationEventPayload!

  """Изменить оценку мероприятия или участия помощника в мероприятии"""
  updateFoundationEventAttendanceRating(input: UpdateFoundationEventAttendanceRatingInput!): UpdateFoundationEventAttendanceRatingPayload!

  """Изменить отчёт о проведённом событии фонда-партнёра"""
  updateFoundationEventReport(
    """Параметры изменения отчёта"""
    input: UpdateFoundationEventReportInput!
  ): UpdateFoundationEventReportPayload!

  """Изменение данных учётной записи представителя фонда-партнёра"""
  updateFoundationRepresentative(input: UpdateFoundationRepresentativeInput!): UpdateFoundationRepresentativePayload!

  """Обновление баланса ООО"""
  updateLimitedLiabilityCompanyBalance(input: UpdateLimitedLiabilityCompanyBalanceInput!): UpdateLimitedLiabilityCompanyBalancePayload!

  """Изменение отчёта ООО"""
  updateLimitedLiabilityCompanyReport(input: UpdateLimitedLiabilityCompanyReportInput!): UpdateLimitedLiabilityCompanyReportPayload!

  """Обновить список документов счёта"""
  updateLimitedLiabilityCompanyReportDocuments(input: UpdateLimitedLiabilityCompanyReportDocumentsInput!): UpdateLimitedLiabilityCompanyReportDocumentsPayload!

  """Изменение данных учётной записи модератора"""
  updateModerator(input: UpdateModeratorInput!): UpdateModeratorPayload!

  """Обновить разовую потребность"""
  updateOneTimeNeed(input: UpdateOneTimeNeedInput!): UpdateOneTimeNeedPayload!

  """Изменяет документы отчёта разовой потребности"""
  updateOneTimeNeedDocuments(input: UpdateOneTimeNeedDocumentsInput!): UpdateOneTimeNeedDocumentsPayload!

  """Изменяет документы расхода проекта"""
  updateProjectExpenseDocuments(input: UpdateProjectExpenseDocumentsInput!): UpdateProjectExpenseDocumentsPayload!

  """Изменяет документы отчёта периода регулярной потребности"""
  updateRegularNeedPeriodDocuments(input: UpdateRegularNeedPeriodDocumentsInput!): UpdateRegularNeedPeriodDocumentsPayload!

  """Изменяет данные спецпроекта."""
  updateSpecialProject(input: UpdateSpecialProjectInput!): UpdateSpecialProjectPayload!

  """Изменяет документы спецпроекта."""
  updateSpecialProjectDocuments(input: UpdateSpecialProjectDocumentsInput!): UpdateSpecialProjectDocumentsPayload!

  """Изменяет порядок отображения опубликованных незавершённых спецпроектов"""
  updateSpecialProjectsVisibilityOrder(input: UpdateSpecialProjectsVisibilityOrderInput!): UpdateSpecialProjectsVisibilityOrderPayload!

  """Обновляет историю"""
  updateStory(
    """Параметры обновления истории"""
    input: UpdateStoryInput!
  ): UpdateStoryPayload!

  """Изменяет данные блока историй."""
  updateStoryBlock(
    """Новые данные блока историй."""
    input: UpdateStoryBlockInput!
  ): UpdateStoryBlockPayload!

  """Обновляет экраны истории"""
  updateStoryScreens(
    """Параметры обновления истории"""
    input: UpdateStoryScreensInput!
  ): UpdateStoryScreensPayload!

  """Изменение данных учётной записи системного администратора"""
  updateSystemAdministrator(input: UpdateSystemAdministratorInput!): UpdateSystemAdministratorPayload!

  """Изменение информации о подопечном"""
  updateWard(input: UpdateWardInput!): UpdateWardPayload!

  """Обновить список документов подопечного"""
  updateWardDocuments(input: UpdateWardDocumentsInput!): UpdateWardDocumentsPayload!

  """Изменить информацию об условиях списания комиссии подписки"""
  upgradeSubscriptionCommission(input: UpgradeSubscriptionCommissionInput!): UpgradeSubscriptionCommissionPayload!

  """Загружает промо-коды в достижение с промо-кодами"""
  uploadPromoCodes(input: UploadPromoCodesInput!): UploadPromoCodesPayload!
}

"""Разрешения, относящиеся к работе с категориями"""
type CategoriesPermissions {
  """Текущий пользователь может управлять категориями."""
  manage: Boolean!
}

input CategoryIdFilterInput {
  and: [CategoryIdFilterInput!]
  or: [CategoryIdFilterInput!]
  eq: CategoryId!
  neq: CategoryId!
}

type Query {
  """Счёт с указанным идентификатором"""
  account(id: AccountId!): Account

  """Возвращает достижение с указанным идентификатором"""
  achievementById(id: AchievementId!): Achievement

  """Возвращает список достижений"""
  achievements(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    includeUnpublished: Boolean! = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AchievementsConnection

  """Активные события фондов-партнёров"""
  activeFoundationEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventSortInput!]

    """Текст для поиска"""
    search: String
  ): FoundationEventsConnection

  """Подсказки адресов для заданной строки"""
  addressSuggestions(
    """Количество возвращаемых результатов"""
    count: Int

    """Настройки возвращаемых подсказок"""
    mode: AddressSuggestionMode! = REGULAR

    """Строка поиска"""
    query: String!
  ): [AddressSuggestion!]!

  """Администраторы системы"""
  administrators(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Параметры отбора администраторов"""
    filter: AdministratorsFilterInput

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [AdministratorsSortInput!]
  ): AdministratorsConnection

  """
  Различные расчётные значения, предназначенные для визуализации статистики платформы
  """
  amounts: Amounts!

  """Утверждённые события фондов-партнёров"""
  approvedFoundationEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventSortInput!]

    """Текст для поиска"""
    search: String
  ): FoundationEventsConnection

  """Жертвователь с указанным идентификатором"""
  benefactorById(
    """Идентификатор жертвователя"""
    id: BenefactorId!
  ): Benefactor!

  """Жертвователи"""
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [BenefactorSort!]
    where: BenefactorFilter
  ): BenefactorsConnection

  """Рейтинг накопления монет"""
  benefactorsCoinsAccumulationRating(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorsCoinsAccumulationRatingConnection

  """Общее количество средств на всех счетах-депозитах жертвователей"""
  benefactorsDepositAccountsAmount: Int!

  """Статус жертвователя с указанным идентификатором"""
  benefactorStatusById(id: BenefactorStatusId!): BenefactorStatus

  """Статусы жертвователя"""
  benefactorStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorStatusesConnection

  """Жертвователи, у которых есть счета-депозиты"""
  benefactorsWithDepositAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorsWithDepositAccountsConnection

  """
  Список идентификаторов подопечных, которым помогает текущий жертвователь
  """
  benefactorWardsIds: [WardId!]!

  """Широковещательные уведомления"""
  broadcastNotifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [BroadcastNotificationSortInput!]
  ): BroadcastNotificationsConnection

  """Категории"""
  categories: [Category!]!

  """Категория с указанным идентификатором"""
  categoryById(
    """Идентификатор категории"""
    id: CategoryId!
  ): Category

  """Список городов"""
  cities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [CitySortInput!]
  ): CitiesConnection

  """Город с указанным идентификатором"""
  cityById(id: CityId!): City
  cityByIpAddress: CityByIpResult!

  """Версии клиентов"""
  clientVersions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClientVersionsConnection

  """
  Возвращает Public ID платёжной системы CloudPayments для формирования криптограмм
  """
  cloudPaymentsPublicId: String!

  """Пожертвование с указанным идентификатором"""
  donation(
    """Идентификатор пожертвования"""
    id: DonationId!
  ): Donation

  """Фонд-партнёр"""
  foundationById(
    """Идентификатор фонда-партнёра"""
    id: FoundationId!
  ): Foundation

  """Событие с указанным идентификатором"""
  foundationEventById(
    """Идентификатор события фонда-партнёра"""
    id: FoundationEventId!
  ): FoundationEvent

  """Аккумулированные счётчики событий фондов-партнёров"""
  foundationEventsCounters: FoundationEventsCounters!

  """События фондов-партнёров требующие утверждения"""
  foundationEventsPendingApproval(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventSortInput!]
    where: FoundationEventFilterInput
  ): FoundationEventsPendingApprovalConnection

  """Фонды-партнёры"""
  foundations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationSortInput!]
    where: FoundationFilterInput
  ): FoundationsConnection

  """Информация о самой последней доступной версии клиентского приложения"""
  latestClientVersion(
    """Идентификатор клиента"""
    client: ClientApplication!

    """MAJOR-часть версии клиента"""
    major: Int!

    """MINOR-часть версии клиента"""
    minor: Int!

    """PATCH-часть версии клиента"""
    patch: Int!
  ): ClientVersion

  """Возвращает данные об ООО"""
  limitedLiabilityCompany: LimitedLiabilityCompany!

  """Возвращает отчёт ООО с указанным идентификатором"""
  limitedLiabilityCompanyReport(id: ID!): LimitedLiabilityCompanyReport

  """Информация о текущем пользователе"""
  me: Me!

  """Возвращает потребность с указанным идентификатором"""
  needById(needId: NeedId!): Need

  """Информация, необходимая для создания заказа"""
  newOrderInformation(
    """
    Идентификатор жертвователя, для которого создаётся заказ (необходим только если вызов осуществляет не жертвователь)
    """
    benefactorId: BenefactorId

    """Намерения, которые войдут в заказ"""
    donationIntents: [DonationIntentInput!]!
  ): NewOrderInformation!

  """Уведомление с указанным идентификатором."""
  notificationById(
    """идентификатор уведомления"""
    id: NotificationId!
  ): Notification

  """Заказ с указанным идентификатором"""
  orderById(id: OrderId!): Order

  """Заказы"""
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [OrderSortInput!]
    where: OrderFilterInput
  ): OrdersConnection

  """Проект"""
  project: Project!

  """Период регулярной потребности"""
  regularNeedPeriodById(
    """Идентификатор периода регулярной потребности"""
    id: RegularNeedPeriodId!
  ): RegularNeedPeriod
  search(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    categories: [CategoryId!]
    city: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    onlyAwaitingHelp: Boolean! = false
    onlyRelated: Boolean! = false
  ): SearchConnection

  """Категории навыков помощников"""
  skillCategories: [SkillCategory!]!

  """Возвращает спецпроект с указанным идентификатором"""
  specialProjectById(
    """Идентификатор спецпроекта"""
    id: SpecialProjectId!
  ): SpecialProject

  """Возвращает спецпроекты"""
  specialProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Возвращать спецпроекты в указанном городе"""
    city: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Возвращать завершённые или отменённые спецпроекты?"""
    includeClosedOrCancelled: Boolean! = false

    """Возвращать неопубликованные спецпроекты?"""
    includeUnpublished: Boolean! = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SpecialProjectsConnection

  """Статистика платежей"""
  statistics: Statistics!

  """Блок историй с указанным идентификатором."""
  storyBlockById(id: StoryBlockId!): StoryBlock

  """Блок историй с указанной меткой."""
  storyBlockByLabel(label: StoryBlockLabel!): StoryBlock

  """Блоки историй."""
  storyBlocks: [StoryBlock!]!

  """История с указанным идентификатором."""
  storyById(
    """Идентификатор истории."""
    id: StoryId!
  ): Story

  """Подписка на регулярные потребности с указанным идентификатором"""
  subscriptionById(
    """Идентификатор подписки"""
    subscriptionId: DonationSubscriptionId!
  ): DonationSubscription

  """Пользователь с указанным идентификатором"""
  userById(
    """Идентификатор пользователя"""
    id: ID!
  ): User

  """Возвращает ваучер с указанным кодом."""
  voucherByCode(
    """Код ваучера."""
    code: String!
  ): Voucher

  """Подопечный с указанным идентификатором"""
  wardById(
    """Идентификатор подопечного"""
    id: WardId!
  ): Ward

  """Подопечные"""
  wards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [WardSortInput!]
    where: WardFilterInput
  ): WardsConnection

  """Список подопечных для указанных идентификаторов"""
  wardsByIds(
    """Идентификаторы подопечных"""
    ids: [WardId!]!
  ): [Ward]!

  """Подопечные и их финансовая информация"""
  wardsFinances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [WardFinancesSortInput!]
    where: WardFinancesFilterInput
  ): WardsFinancesConnection

  """Идентификаторы всех подопечных"""
  wardsIds(
    """Нужно ли возвращать пока не опубликованных подопечных"""
    includeUnpublished: Boolean
  ): [WardId!]!
}

"""Адрес"""
input AddressFilterInput {
  and: [AddressFilterInput!]
  or: [AddressFilterInput!]

  """Текст для отображения"""
  displayText: StringOperationFilterInput

  """
  Полный адрес для последующего поиска в адресных системах, например "Тверская обл, пгт Пено"
  """
  fullAddress: StringOperationFilterInput

  """Регион (область, край)"""
  region: IdentifiableAddressElementFilterInput

  """Район в регионе"""
  area: IdentifiableAddressElementFilterInput

  """Город"""
  city: IdentifiableAddressElementFilterInput

  """Населённый пункт"""
  settlement: IdentifiableAddressElementFilterInput

  """Улица"""
  street: IdentifiableAddressElementFilterInput

  """Дом"""
  house: AddressElementFilterInput

  """Корпус/строение"""
  block: AddressElementFilterInput

  """Корпус/строение"""
  flat: AddressElementFilterInput

  """Широта"""
  latitude: FloatOperationFilterInput

  """Долгота"""
  longitude: FloatOperationFilterInput
}

"""Адрес"""
input AddressSortInput {
  """Текст для отображения"""
  displayText: SortEnumType

  """
  Полный адрес для последующего поиска в адресных системах, например "Тверская обл, пгт Пено"
  """
  fullAddress: SortEnumType

  """Регион (область, край)"""
  region: IdentifiableAddressElementSortInput

  """Район в регионе"""
  area: IdentifiableAddressElementSortInput

  """Город"""
  city: IdentifiableAddressElementSortInput

  """Населённый пункт"""
  settlement: IdentifiableAddressElementSortInput

  """Улица"""
  street: IdentifiableAddressElementSortInput

  """Дом"""
  house: AddressElementSortInput

  """Корпус/строение"""
  block: AddressElementSortInput

  """Корпус/строение"""
  flat: AddressElementSortInput

  """Широта"""
  latitude: SortEnumType

  """Долгота"""
  longitude: SortEnumType
}

"""Адрес"""
type Address {
  """Район в регионе"""
  area: IdentifiableAddressElement

  """Корпус/строение"""
  block: AddressElement

  """Город"""
  city: IdentifiableAddressElement

  """Текст для отображения"""
  displayText: String!

  """Корпус/строение"""
  flat: AddressElement

  """
  Полный адрес для последующего поиска в адресных системах, например "Тверская обл, пгт Пено"
  """
  fullAddress: String!

  """Дом"""
  house: AddressElement

  """Широта"""
  latitude: Float

  """Долгота"""
  longitude: Float

  """Регион (область, край)"""
  region: IdentifiableAddressElement

  """Населённый пункт"""
  settlement: IdentifiableAddressElement

  """Улица"""
  street: IdentifiableAddressElement
}

"""Разрешения, относящиеся к действиям с достижениями."""
type AchievementsPermissions {
  """Текущий пользователь может управлять достижениями."""
  manage: Boolean!

  """Текущий пользователь может просматривать достижения."""
  view: Boolean!
}

"""Достижение"""
interface Achievement {
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество монет, которое требуется для получения достижения"""
  coins: Int!

  """Информация о создании достижения"""
  created: AuditMarker!

  """Описание достижения"""
  description: String!
  id: AchievementId!

  """Изображение достижения в ленте"""
  image: FileInformation!

  """Достижение выделяется?"""
  isHighlighted: Boolean!

  """Информация о публикации достижения"""
  published: AuditMarker

  """История, содержащая описание достижения и/или награду."""
  story: Story!

  """Название достижения"""
  title: String!

  """Изображение достижения в списке топ-N достижений"""
  topImage: FileInformation

  """Позиция достижения в топе"""
  topPosition: Int

  """Информация о последнем обновлении достижения"""
  updated: AuditMarker!
}

"""Достижение с ограниченным количеством наград"""
interface AchievementWithLimitedNumberOfPrizes implements Achievement {
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество монет, которое требуется для получения достижения"""
  coins: Int!

  """Информация о создании достижения"""
  created: AuditMarker!

  """Описание достижения"""
  description: String!
  id: AchievementId!

  """Изображение достижения в ленте"""
  image: FileInformation!

  """Достижение выделяется?"""
  isHighlighted: Boolean!

  """Количество выданных призов"""
  numberOfGrantedPrizes: Int!

  """Информация о публикации достижения"""
  published: AuditMarker

  """История, содержащая описание достижения и/или награду."""
  story: Story!

  """Название достижения"""
  title: String!

  """Изображение достижения в списке топ-N достижений"""
  topImage: FileInformation

  """Позиция достижения в топе"""
  topPosition: Int

  """Общее количество призов"""
  totalNumberOfPrizes: Int!

  """Информация о последнем обновлении достижения"""
  updated: AuditMarker!
}

"""Достижение с неограниченным количеством наград"""
type AchievementWithUnlimitedNumberOfPrizes implements Achievement {
  """Жертвователи, получившие достижение"""
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество монет, которое требуется для получения достижения"""
  coins: Int!

  """Информация о создании достижения"""
  created: AuditMarker!

  """Описание достижения"""
  description: String!
  id: AchievementId!

  """Изображение достижения в ленте"""
  image: FileInformation!

  """Достижение выделяется?"""
  isHighlighted: Boolean!

  """Информация о публикации достижения"""
  published: AuditMarker

  """История, содержащая описание достижения и/или награду."""
  story: Story!

  """Название достижения"""
  title: String!

  """Изображение достижения в списке топ-N достижений"""
  topImage: FileInformation

  """Позиция достижения в топе"""
  topPosition: Int

  """Информация о последнем обновлении достижения"""
  updated: AuditMarker!
}

"""Достижение с материальными наградами"""
type AchievementWithMaterialPrizes implements Achievement & AchievementWithLimitedNumberOfPrizes {
  """Жертвователи, получившие достижение"""
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество монет, которое требуется для получения достижения"""
  coins: Int!

  """Информация о создании достижения"""
  created: AuditMarker!

  """Описание достижения"""
  description: String!
  id: AchievementId!

  """Изображение достижения в ленте"""
  image: FileInformation!

  """Достижение выделяется?"""
  isHighlighted: Boolean!

  """Количество выданных призов"""
  numberOfGrantedPrizes: Int!

  """Информация о публикации достижения"""
  published: AuditMarker

  """История, содержащая описание достижения и/или награду."""
  story: Story!

  """Название достижения"""
  title: String!

  """Изображение достижения в списке топ-N достижений"""
  topImage: FileInformation

  """Позиция достижения в топе"""
  topPosition: Int

  """Общее количество призов"""
  totalNumberOfPrizes: Int!

  """Информация о последнем обновлении достижения"""
  updated: AuditMarker!
}

"""Достижение с наградой в виде промо-кода"""
type AchievementWithPromoCodes implements Achievement & AchievementWithLimitedNumberOfPrizes {
  """Жертвователи, получившие достижение"""
  benefactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество монет, которое требуется для получения достижения"""
  coins: Int!

  """Информация о создании достижения"""
  created: AuditMarker!

  """Описание достижения"""
  description: String!
  id: AchievementId!

  """Изображение достижения в ленте"""
  image: FileInformation!

  """Достижение выделяется?"""
  isHighlighted: Boolean!

  """Количество выданных призов"""
  numberOfGrantedPrizes: Int!

  """Информация о публикации достижения"""
  published: AuditMarker

  """История, содержащая описание достижения и/или награду."""
  story: Story!

  """Название достижения"""
  title: String!

  """Изображение достижения в списке топ-N достижений"""
  topImage: FileInformation

  """Позиция достижения в топе"""
  topPosition: Int

  """Общее количество призов"""
  totalNumberOfPrizes: Int!

  """Информация о последнем обновлении достижения"""
  updated: AuditMarker!

  """Ссылка для применения промо-кода"""
  url: String
}

"""Полученное достижение"""
interface BenefactorAchievement {
  """Достижение"""
  achievement: Achievement!

  """Идентификатор жертвователя"""
  benefactor: Benefactor!
  id: BenefactorAchievementId!

  """Дата и время получения достижения"""
  receivedAt: DateTime!

  """Дата и время показа достижения жертвователю"""
  shownToBenefactorAt: DateTime
}

"""Полученное достижение, содержащее видео"""
type BenefactorAchievementWithVideo implements BenefactorAchievement {
  """Достижение"""
  achievement: Achievement!

  """Идентификатор жертвователя"""
  benefactor: Benefactor!
  id: BenefactorAchievementId!

  """Дата и время получения достижения"""
  receivedAt: DateTime!

  """Дата и время показа достижения жертвователю"""
  shownToBenefactorAt: DateTime

  """Ссылка на видео"""
  videoUrl: String!
}

"""Полученное достижение без приза"""
type BenefactorAchievementWithoutPrize implements BenefactorAchievement {
  """Достижение"""
  achievement: Achievement!

  """Идентификатор жертвователя"""
  benefactor: Benefactor!
  id: BenefactorAchievementId!

  """Дата и время получения достижения"""
  receivedAt: DateTime!

  """Дата и время показа достижения жертвователю"""
  shownToBenefactorAt: DateTime
}

"""Достижение с материальным призом"""
type BenefactorAchievementWithMaterialPrize implements BenefactorAchievement {
  """Достижение"""
  achievement: Achievement!

  """Идентификатор жертвователя"""
  benefactor: Benefactor!
  id: BenefactorAchievementId!

  """Порядковый номер полученного приза"""
  number: Int!

  """Дата и время получения достижения"""
  receivedAt: DateTime!

  """Дата и время показа достижения жертвователю"""
  shownToBenefactorAt: DateTime
}

"""Достижение с промо-кодом"""
type BenefactorAchievementWithPromoCode implements BenefactorAchievement {
  """Достижение"""
  achievement: Achievement!

  """Идентификатор жертвователя"""
  benefactor: Benefactor!
  id: BenefactorAchievementId!

  """Порядковый номер полученного приза"""
  number: Int!

  """Промо-код достижения"""
  promoCode: String

  """Дата и время получения достижения"""
  receivedAt: DateTime!

  """Дата и время показа достижения жертвователю"""
  shownToBenefactorAt: DateTime
}

"""Событие изменения баланса монет жертвователя"""
type BenefactorCoinsBalanceChanged {
  """Жертвователь"""
  benefactor: Benefactor!

  """Количество добавленных монет"""
  coinsAccumulated: Int!
}

"""Информация о балансе монет жертвователя."""
type BenefactorsCoinsAccumulationRatingEntry {
  benefactor: Benefactor!

  """Количество набранных монет"""
  coins: Int!
}

"""Статус жертвователя"""
type BenefactorStatus {
  """Количество монет, по достижению которого выдаётся статус"""
  coins: Int!

  """Информация о создании статуса"""
  created: AuditMarker!

  """Описание статуса"""
  description: String!
  id: BenefactorStatusId!

  """Изображение статуса в ленте"""
  image: FileInformation!

  """История, содержащая описание статуса"""
  story: Story!

  """Название статуса"""
  title: String!

  """Информация о последнем обновлении статуса"""
  updated: AuditMarker!
}

"""Информация о начислении монет жертвователю"""
type CoinsAccumulation {
  """Количество начисленных монет"""
  amount: Int!

  """Дата и время начисления"""
  createdAt: DateTime!

  """Описание начисления"""
  description: String!
  id: CoinsAccumulationId!

  """Причина начисления сердец"""
  reason: CoinsAccumulationReason!
}

type Subscription {
  onBenefactorCoinsBalanceChanged(benefactorId: BenefactorId!): BenefactorCoinsBalanceChanged!
  onOrderStatusChanged(orderId: OrderId!): Order!
}

"""Разрешения, относящиеся к действиям с широковещательными уведомлениями"""
type BroadcastNotificationsPermissions {
  """Текущий пользователь может создавать широковещательные уведомления"""
  create: Boolean!

  """Текущий пользователь может просматривать широковещательные уведомления"""
  view: Boolean!
}

"""Широковещательное уведомление"""
input BroadcastNotificationSortInput {
  """Информация о создании объекта"""
  created: AuditMarkerSortInput

  """Статус уведомления"""
  status: SortEnumType
}

"""Уведомление"""
type Notification {
  """Помимо PUSH-оповещения отправлять по СМС"""
  alsoSendAsSms: Boolean!

  """Широковещательное уведомление."""
  broadcastNotification: BroadcastNotification

  """Дата и время создания оповещения"""
  createdAt: DateTime!

  """Дополнительные данные"""
  data: [KeyValuePairOfStringAndString!]
  id: NotificationId!

  """Дата и время прочтения оповещения"""
  readAt: DateTime

  """Дата и время отправки оповещения"""
  sentAt: DateTime

  """Текст уведомления"""
  text: String!

  """Заголовок уведомления"""
  title: String!
}

"""Разрешения, относящиеся к действиям с проектом"""
type ProjectPermissions {
  """Текущий пользователь может управлять счетами-расходами проекта"""
  manageExpenses: Boolean!
}

"""Параметры упорядочивания расходов проекта"""
input ProjectExpenseSortInput {
  """Дата отчётного периода, используется только год и месяц"""
  referenceDate: SortEnumType

  """Название (содержание) расхода"""
  title: SortEnumType
}

"""Расход проекта"""
type ProjectExpense {
  """Счёт расхода"""
  account: Account!

  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Дата и время создания расхода"""
  createdAt: DateTime!

  """Прикреплённые документы"""
  documents: [Document!]!
  id: ProjectExpenseId!

  """Дата отчётного периода, используется только год и месяц"""
  referenceDate: Date!

  """Дата и время отправки отчёта о выполнении потребности"""
  reportSentAt: DateTime

  """Размер расхода"""
  requiredAmount: Int!

  """Чьи пожертвования оплатили расход проекта"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Название (содержание) расхода"""
  title: String!

  """Дата и время обновления расхода"""
  updatedAt: DateTime!
}

"""Разрешения, относящиеся к действиям с историями"""
type StoriesPermissions {
  """Текущий пользователь может управлять историями."""
  manage: Boolean!

  """Текущий пользователь может просматривать (неопубликованные) истории"""
  view: Boolean!
}

"""Элемент выполнения поискового запроса"""
interface SearchResultItem {
  """Категории"""
  categories: [Category!]!

  """Город"""
  city: String

  """Собранная сумма"""
  collectedAmount: Int!

  """Требуется ли помощь?"""
  isHelpNeeded: Boolean!
}

"""Результат поиска (спецпроект)"""
type SpecialProjectSearchResultItem implements SearchResultItem {
  """Категории"""
  categories: [Category!]!

  """Город"""
  city: String

  """Собранная сумма"""
  collectedAmount: Int!

  """Требуется ли помощь?"""
  isHelpNeeded: Boolean!

  """Спецпроект"""
  specialProject: SpecialProject!
}

"""Результат поиска (подопечный)"""
type WardSearchResultItem implements SearchResultItem {
  """Категории"""
  categories: [Category!]!

  """Город"""
  city: String

  """Собранная сумма"""
  collectedAmount: Int!

  """Требуется ли помощь?"""
  isHelpNeeded: Boolean!

  """Подопечный"""
  ward: Ward!
}

"""Разрешения, относящиеся к действиям подопечными"""
type WardsPermissions {
  """Текущий пользователь может добавлять в систему подопечных"""
  create: Boolean!

  """Текущий пользователь может изменять информацию о подопечных"""
  edit: Boolean!

  """Текущий пользователь может управлять потребностями подопечного"""
  manageNeeds: Boolean!

  """
  Текущий пользователь может просматривать закрытую информацию подопечных
  """
  viewPrivateInformation: Boolean!
}

"""Потребность: Продуктовая корзина"""
type GrocerySetNeed implements Need & RegularNeed {
  """Информации об архивировании потребности"""
  archived: AuditMarker

  """Информация о добавлении потребности"""
  created: AuditMarker!
  id: NeedId!

  """Периоды потребности"""
  periods(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [RegularNeedPeriodSortInput!]
  ): RegularNeedPeriodsConnection

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Информация о последнем обновлении потребности"""
  updated: AuditMarker!

  """Подопечный"""
  ward: Ward!
}

"""Потребность"""
interface Need {
  """Информации об архивировании потребности"""
  archived: AuditMarker

  """Информация о добавлении потребности"""
  created: AuditMarker!
  id: NeedId!

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Информация о последнем обновлении потребности"""
  updated: AuditMarker!

  """Подопечный"""
  ward: Ward!
}

"""Разовая потребность (не повторяется)"""
type OneTimeNeed implements Need {
  """Счёт потребности"""
  account: Account!

  """Информации об архивировании потребности"""
  archived: AuditMarker

  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Информация о добавлении потребности"""
  created: AuditMarker!

  """Описание потребности"""
  description: String!

  """Прикреплённые документы"""
  documents: [Document!]!

  """Номер иконки в списке доступных иконок"""
  icon: Int!
  id: NeedId!

  """Дата и время отправки отчёта о выполнении потребности"""
  reportSent: AuditMarker

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Уже помогают"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Дата, к которой требуется собрать средства (включительно)"""
  targetDate: Date!

  """Заголовок потребности"""
  title: String!

  """Информация о последнем обновлении потребности"""
  updated: AuditMarker!

  """
  Ссылка на страницу, содержащую подробную информацию о товаре/продукте/услуге
  """
  url: String

  """Подопечный"""
  ward: Ward!
}

"""Регулярная (повторяющаяся каждый период) потребность"""
interface RegularNeed implements Need {
  """Информации об архивировании потребности"""
  archived: AuditMarker

  """Информация о добавлении потребности"""
  created: AuditMarker!
  id: NeedId!

  """Периоды потребности"""
  periods(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [RegularNeedPeriodSortInput!]
  ): RegularNeedPeriodsConnection

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Информация о последнем обновлении потребности"""
  updated: AuditMarker!

  """Подопечный"""
  ward: Ward!
}

"""Период регулярной потребности"""
input RegularNeedPeriodSortInput {
  """Начало периода"""
  start: SortEnumType
}

"""Период регулярной потребности"""
type RegularNeedPeriod {
  """Счёт периода"""
  account: Account

  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Дата и время создания периода"""
  createdAt: DateTime!

  """Прикреплённые документы"""
  documents: [Document!]!

  """Окончание периода"""
  end: DateTime!
  id: RegularNeedPeriodId!

  """Потребность"""
  need: Need!

  """Дата и время отправки отчёта о выполнении потребности"""
  reportSentAt: DateTime

  """Начало периода"""
  start: DateTime!

  """Чьи пожертвования оплатили период регулярной потребности"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Дата и время обновления периода"""
  updatedAt: DateTime!

  """Подопечный"""
  ward: Ward!
}

"""Подопечный"""
input WardFilterInput {
  and: [WardFilterInput!]
  or: [WardFilterInput!]

  """Частная информация о подопечном"""
  privateInformation: WardPrivateInformationFilterInput

  """Общедоступная информация о подопечном"""
  publicInformation: WardPublicInformationFilterInput

  """Подопечный доступен для просмотра жертвователями"""
  published: BooleanOperationFilterInput

  """Подопечному требуется немедленная помощь"""
  immediateHelpRequired: BooleanOperationFilterInput

  """Аудит добавления"""
  created: AuditMarkerFilterInput

  """Аудит изменения"""
  updated: AuditMarkerFilterInput
}

"""Частная информация о подопечном"""
input WardPrivateInformationFilterInput {
  and: [WardPrivateInformationFilterInput!]
  or: [WardPrivateInformationFilterInput!]

  """Адрес"""
  address: AddressFilterInput
}

"""Частная информация о подопечном"""
input WardPrivateInformationSortInput {
  """Адрес"""
  address: AddressSortInput

  """Подъезд"""
  entranceNumber: SortEnumType

  """Этаж"""
  flatFloor: SortEnumType

  """Паспортные данные"""
  passport: PassportSortInput

  """Семейный статус"""
  maritalStatus: SortEnumType

  """Профессия"""
  profession: SortEnumType

  """Звание или учёная степень"""
  rank: SortEnumType

  """Группа инвалидности"""
  disabilityGroup: SortEnumType

  """Частные заметки о подопечном"""
  comments: SortEnumType

  """Номер телефона"""
  phoneNumber: SortEnumType
}

"""Общедоступная информация о подопечном"""
input WardPublicInformationFilterInput {
  and: [WardPublicInformationFilterInput!]
  or: [WardPublicInformationFilterInput!]

  """Имя"""
  name: NomenFilterInput

  """Дата рождения"""
  dateOfBirth: DateOperationFilterInput

  """Дата смерти"""
  dateOfDeath: DateOperationFilterInput

  """Пол"""
  gender: GenderOperationFilterInput

  """История подопечного"""
  story: StringOperationFilterInput

  """Категории"""
  categories: ListCategoryIdOperationFilterInput

  """Населённый пункт проживания"""
  city: StringOperationFilterInput
}

"""Общедоступная информация о подопечном"""
input WardPublicInformationSortInput {
  """Имя"""
  name: NomenSortInput

  """Дата рождения"""
  dateOfBirth: SortEnumType

  """Дата смерти"""
  dateOfDeath: SortEnumType

  """Пол"""
  gender: SortEnumType

  """История подопечного"""
  story: SortEnumType

  """Населённый пункт проживания"""
  city: SortEnumType

  """Широта места проживания подопечного"""
  publicLatitude: SortEnumType

  """Долгота места проживания подопечного"""
  publicLongitude: SortEnumType
}

"""Общедоступная информация о подопечном"""
type WardPublicInformation {
  """Категории"""
  categories: [Category!]!

  """Населённый пункт проживания"""
  city: String!

  """Дата рождения"""
  dateOfBirth: Date!

  """Дата смерти"""
  dateOfDeath: Date

  """Пол"""
  gender: Gender!

  """Имя"""
  name: Nomen!

  """Фотография подопечного"""
  photo: FileInformation!

  """Широта места проживания подопечного"""
  publicLatitude: Float!

  """Долгота места проживания подопечного"""
  publicLongitude: Float!

  """История подопечного"""
  story: String!
}

"""Подопечный"""
input WardSortInput {
  """Частная информация о подопечном"""
  privateInformation: WardPrivateInformationSortInput

  """Общедоступная информация о подопечном"""
  publicInformation: WardPublicInformationSortInput

  """Информация о деактивации подопечного"""
  deactivationInformation: WardDeactivationInformationSortInput

  """Подопечный доступен для просмотра жертвователями"""
  published: SortEnumType

  """Подопечному требуется немедленная помощь"""
  immediateHelpRequired: SortEnumType

  """Аудит добавления"""
  created: AuditMarkerSortInput

  """Аудит изменения"""
  updated: AuditMarkerSortInput
  id: SortEnumType
}

"""Разрешения, относящиеся к действиям с версиями клиентских приложений"""
type ClientVersionsPermissions {
  """Текущий пользователь может управлять версиями клиентских приложений"""
  manage: Boolean!
}

"""Разрешения, относящиеся к действиям с отчётами"""
type ReportsPermissions {
  """Текущий пользователь может запускать создание отчётов вне расписания"""
  runReport: Boolean!
}

"""Разрешения, относящиеся к действиям с пользователями"""
type UsersPermissions {
  """
  Текущий пользователь может устанавливать номера телефона и адреса электронной почты
  """
  changeEmailAndPhoneNumber: Boolean!

  """Текущий пользователь может устанавливать пароли учётных записей"""
  changePassword: Boolean!

  """
  Текущий пользователь может создавать учётные записи представителей фондов-партнёров
  """
  createAndEditFoundationRepresentative: Boolean!

  """Текущий пользователь может создавать учётные записи модераторов"""
  createAndEditModerator: Boolean!

  """
  Текущий пользователь может создавать учётные записи системных администраторов
  """
  createAndEditSystemAdministrator: Boolean!

  """Текущий пользователь может удалять учётные записи"""
  delete: Boolean!

  """Текущий пользователь может блокировать и разблокировать учётные записи"""
  enableOrDisable: Boolean!

  """Текущий пользователь может получать список учётных записей"""
  list: Boolean!

  """
  Текущий пользователь может просматривать информацию учётных записей (например, поля createdBy и updatedBy)
  """
  view: Boolean!
}

"""Параметры упорядочивания учётных записей администраторов"""
input AdministratorsSortInput {
  displayName: SortEnumType
  disabled: SortEnumType
  createdOn: SortEnumType
}

"""
Информация о пользователе и дате и времени совершения какой-либо операции
"""
input AuditMarkerFilterInput {
  and: [AuditMarkerFilterInput!]
  or: [AuditMarkerFilterInput!]
  exists: Boolean

  """Дата и время совершения операции"""
  timestamp: DateTimeOperationFilterInput
}

"""
Информация о пользователе и дате и времени совершения какой-либо операции
"""
input AuditMarkerSortInput {
  """Дата и время совершения операции"""
  timestamp: SortEnumType
}

"""Учётная запись жертвователя"""
type BenefactorIdentity implements User {
  """Жертвователь"""
  benefactor: Benefactor!

  """Дата регистрации"""
  createdOn: DateTime!

  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Имя для показа"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён администратором"""
  emailConfirmed: Boolean!

  """Идентификатор"""
  id: ID!

  """Номер телефона"""
  phoneNumber: String
}

"""Представитель фонда-партнёра"""
type FoundationRepresentative implements User {
  """Дата регистрации"""
  createdOn: DateTime!

  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Имя для показа"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён администратором"""
  emailConfirmed: Boolean!

  """Фонд-партнёр, от лица которого выступает представитель"""
  foundation: Foundation!

  """Идентификатор"""
  id: ID!

  """Номер телефона"""
  phoneNumber: String
}

"""Модератор системы"""
type Moderator implements User {
  """Дата регистрации"""
  createdOn: DateTime!

  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Имя для показа"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён администратором"""
  emailConfirmed: Boolean!

  """Идентификатор"""
  id: ID!

  """Номер телефона"""
  phoneNumber: String
}

"""Разрешения текущего пользователя"""
type Permissions {
  """Разрешения, относящиеся к действиям со счетами"""
  accounts: AccountsPermissions!

  """Разрешения, относящиеся к действиям с достижениями."""
  achievements: AchievementsPermissions!

  """Разрешения, относящиеся к действиям с конкретным жертвователем"""
  benefactor(id: BenefactorId!): BenefactorPermissions!

  """Разрешения, относящиеся к действиям с жертвователями"""
  benefactors: BenefactorsPermissions!

  """Разрешения, относящиеся к действиям с широковещательными уведомлениями"""
  broadcastNotifications: BroadcastNotificationsPermissions!

  """Разрешения, относящиеся к разнообразным каталогам данных"""
  catalogs: CatalogsPermissions!

  """Разрешения, относящиеся к работе с категориями"""
  categories: CategoriesPermissions!

  """Разрешения, относящиеся к действиям с версиями клиентских приложений"""
  clientVersions: ClientVersionsPermissions!

  """Разрешения, относящиеся к действиям с конкретным фондом-партнёром"""
  foundation(
    """Идентификатор фонда-партнёра"""
    id: FoundationId!
  ): FoundationPermissions!

  """
  Разрешения, относящиеся к действиям с конкретным событием фонда-партнёра
  """
  foundationEvent(
    """Идентификатор события"""
    id: FoundationEventId!
  ): FoundationEventPermissions!

  """Разрешения, относящиеся к действиям с фондами-партнёрами"""
  foundations: FoundationsPermissions!

  """Разрешения, относящиеся к действиям с информацией об ООО"""
  limitedLiabilityCompany: LimitedLiabilityCompanyPermissions!

  """Разрешения, относящиеся к действиям с заказами"""
  orders: OrdersPermissions!

  """Разрешения, относящиеся к действиям с проектом"""
  project: ProjectPermissions!

  """Разрешения, относящиеся к действиям с отчётами"""
  reports: ReportsPermissions!

  """Разрешения, относящиеся к действиям со спецпроектами"""
  specialProjects: SpecialProjectsPermissions!

  """Разрешения, относящиеся к действиям с историями"""
  stories: StoriesPermissions!

  """Разрешения, относящиеся к действиям с пользователями"""
  users: UsersPermissions!

  """Разрешения, относящиеся к действиям с ваучерами"""
  vouchers: VouchersPermissions!

  """Разрешения, относящиеся к действиям подопечными"""
  wards: WardsPermissions!
}

"""Администратор системы"""
type SystemAdministrator implements User {
  """Дата регистрации"""
  createdOn: DateTime!

  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Имя для показа"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён администратором"""
  emailConfirmed: Boolean!

  """Идентификатор"""
  id: ID!

  """Номер телефона"""
  phoneNumber: String
}

"""Учётная запись пользователя системы"""
interface User {
  """Дата регистрации"""
  createdOn: DateTime!

  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Имя для показа"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён администратором"""
  emailConfirmed: Boolean!

  """Идентификатор"""
  id: ID!

  """Номер телефона"""
  phoneNumber: String
}

"""Разрешения, относящиеся к действиям с фондами-партнёрами"""
type FoundationsPermissions {
  """Текущий пользователь может одобрять события фондов-партнёров"""
  approveEvents: Boolean!

  """Текущий пользователь может добавлять новые фонды-партнёры"""
  create: Boolean!

  """Текущий пользователь может редактировать существующие фонды-партнёры"""
  edit: Boolean!
}

"""Персональные данные жертвователя"""
input BenefactorPersonalDataFilterInput {
  and: [BenefactorPersonalDataFilterInput!]
  or: [BenefactorPersonalDataFilterInput!]
  exists: Boolean

  """Имя"""
  name: NomenFilterInput

  """Дата рождения"""
  birthday: DateOperationFilterInput

  """Рассказ жертвователя о себе"""
  about: StringOperationFilterInput

  """Учётная запись VK"""
  vkUsername: StringOperationFilterInput
}

"""Запрос на участие в событии"""
input FoundationEventApplicationFilterInput {
  and: [FoundationEventApplicationFilterInput!]
  or: [FoundationEventApplicationFilterInput!]

  """Статус заявки"""
  status: FoundationEventApplicationStatusOperationFilterInput

  """Рейтинг жертвователя"""
  benefactorRating: FloatOperationFilterInput
}

"""Запрос на участие в событии"""
input FoundationEventApplicationSortInput {
  """Статус заявки"""
  status: SortEnumType

  """Рейтинг жертвователя"""
  benefactorRating: SortEnumType

  """Аудит создания"""
  created: AuditMarkerSortInput

  """Аудит изменения"""
  updated: AuditMarkerSortInput
}

"""Запрос на участие в событии"""
type FoundationEventApplication {
  """
  Информация о фактическом участии в событии жертвователя, подавшего заявку
  """
  attendance: FoundationEventAttendance

  """Помощник"""
  benefactor: Benefactor!

  """Рейтинг жертвователя"""
  benefactorRating: Float!

  """Аудит создания"""
  created: AuditMarker!

  """Событие фонда-партнёра"""
  event: FoundationEvent!

  """Событие данной заявки завершено"""
  eventIsClosed: Boolean!
  id: FoundationEventApplicationId!

  """Предложенные навыки"""
  skill: [Skill!]!

  """Статус заявки"""
  status: FoundationEventApplicationStatus!

  """Аудит изменения"""
  updated: AuditMarker!
}

"""Информация об участии в событии"""
input FoundationEventAttendanceFilterInput {
  and: [FoundationEventAttendanceFilterInput!]
  or: [FoundationEventAttendanceFilterInput!]

  """Дата и время отметки об участии"""
  checkedInAt: DateTimeOperationFilterInput

  """Оценка события от участника"""
  attendeeRating: IntOperationFilterInput

  """Комментарий о событии от участника"""
  attendeeComment: StringOperationFilterInput

  """Оценка участника от организатора мероприятия"""
  foundationRating: IntOperationFilterInput

  """Комментарий об участнике от организатора мероприятия"""
  foundationComment: StringOperationFilterInput

  """Дата, время и пользователь, последним изменивший объект"""
  updated: AuditMarkerFilterInput
}

"""Информация об участии в событии"""
input FoundationEventAttendanceSortInput {
  """Дата и время отметки об участии"""
  checkedInAt: SortEnumType

  """Оценка события от участника"""
  attendeeRating: SortEnumType

  """Оценка участника от организатора мероприятия"""
  foundationRating: SortEnumType

  """Дата, время и пользователь, последним изменивший объект"""
  updated: AuditMarkerSortInput
}

"""Информация об участии в событии"""
type FoundationEventAttendance {
  """Комментарий о событии от участника"""
  attendeeComment: String

  """Оценка события от участника"""
  attendeeRating: Int

  """Помощник"""
  benefactor: Benefactor!

  """Дата и время отметки об участии"""
  checkedInAt: DateTime!

  """Комментарий об участнике от организатора события"""
  foundationComment: String

  """Событие, в котором жертвователь принимал участие"""
  foundationEvent: FoundationEvent!

  """Оценка участника от организатора события"""
  foundationRating: Int
  id: FoundationEventAttendanceId!
}

"""Информация о событии"""
input FoundationEventDetailsFilterInput {
  and: [FoundationEventDetailsFilterInput!]
  or: [FoundationEventDetailsFilterInput!]

  """Адрес проведения события"""
  address: AddressFilterInput

  """Дата и время начала события относительно города проведения события"""
  start: DateTimeOperationFilterInput

  """Название события"""
  title: StringOperationFilterInput

  """Описание события"""
  description: StringOperationFilterInput
}

"""Информация о событии"""
input FoundationEventDetailsSortInput {
  """Адрес проведения события"""
  address: AddressSortInput

  """Дата и время начала события относительно города проведения события"""
  start: SortEnumType

  """Название события"""
  title: SortEnumType
}

"""Событие фонда-партнёра"""
input FoundationEventFilterInput {
  and: [FoundationEventFilterInput!]
  or: [FoundationEventFilterInput!]

  """Информация о событии"""
  details: FoundationEventDetailsFilterInput

  """Аудит запроса на утверждение события"""
  approvalRequested: AuditMarkerFilterInput

  """Аудит закрытия события"""
  closed: AuditMarkerFilterInput

  """Аудит добавления"""
  created: AuditMarkerFilterInput

  """Аудит отмены события"""
  cancelled: AuditMarkerFilterInput
}

"""Разрешения, относящиеся к конкретному событию фонда-партнёра"""
type FoundationEventPermissions {
  """
  Текущий пользователь может отметить участие зарегистрированного участника в событии
  """
  checkin: Boolean!

  """Текущий пользователь может закрыть событие"""
  close: Boolean!

  """Текущий пользователь может редактировать событие"""
  edit: Boolean!

  """
  Текущий пользователь может редактировать дату и список требований одобренного события
  """
  editApproved: Boolean!

  """Текущий пользователь может редактировать отчёт о событии"""
  editReport: Boolean!

  """Идентификатор события"""
  id: FoundationEventId!

  """
  Текущий пользователь может открывать и закрывать регистрацию на событие
  """
  openOrCloseRegistration: Boolean!

  """
  Текущий пользователь может оценивать зарегистрированных участников события
  """
  rateAttendees: Boolean!

  """Текущий пользователь может запросить одобрение события"""
  requestApproval: Boolean!

  """Текущий пользователь может выбирать заявки для участия в событии"""
  selectApplications: Boolean!

  """Текущий пользователь может назначить себя ответственным за событие"""
  takeOwnership: Boolean!

  """Текущий пользователь может просматривать информацию о событии"""
  view: Boolean!

  """
  Текущий пользователь может просматривать зарегистрированных участников события
  """
  viewAttendees: Boolean!
}

"""Событие фонда-партнёра"""
input FoundationEventSortInput {
  """Информация о событии"""
  details: FoundationEventDetailsSortInput

  """Аудит запроса на утверждение события"""
  approvalRequested: AuditMarkerSortInput

  """Аудит публикации события"""
  approved: AuditMarkerSortInput

  """Аудит закрытия события"""
  closed: AuditMarkerSortInput
}

"""Событие фонда-партнёра"""
type FoundationEvent {
  """Заявки на участие в событии"""
  applications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventApplicationSortInput!]
    where: FoundationEventApplicationFilterInput
  ): ApplicationsConnection

  """Аудит запроса на утверждение события"""
  approvalRequested: AuditMarker

  """Аудит публикации события"""
  approved: AuditMarker

  """Участники события"""
  attendances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Параметры поиска жертвователя"""
    benefactorSearch: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventAttendanceSortInput!]
    where: FoundationEventAttendanceFilterInput
  ): AttendancesConnection

  """Заявка текущего жертвователя на участие в событии"""
  benefactorApplication: FoundationEventApplication

  """Участие текущего жертвователя в событии"""
  benefactorAttendance: FoundationEventAttendance

  """Аудит отмены события"""
  cancelled: AuditMarker

  """URL для отметки участия в событии"""
  checkinUrl: String

  """Аудит закрытия события"""
  closed: AuditMarker

  """Дата и время отправки оповещения о закрытии события"""
  closeNotificationSentAt: DateTime

  """Счётчики жертвователей, подавших заявку на участие в событии"""
  counters: FoundationEventApplicantsCounters!

  """Аудит добавления"""
  created: AuditMarker!

  """Информация о событии"""
  details: FoundationEventDetails!

  """Фонд-партнёр, создавший данное событие"""
  foundation: Foundation
  id: FoundationEventId!

  """Владелец/ответственный события"""
  owner: AuditMarker!

  """Аудит закрытия регистрации на событие"""
  registrationClosed: AuditMarker

  """Отчёт о проведении события"""
  report: FoundationEventReport

  """Аудит изменения"""
  updated: AuditMarker!
}

"""Параметры отбора фондов-партнёров"""
input FoundationFilterInput {
  and: [FoundationFilterInput!]
  or: [FoundationFilterInput!]

  """Название фонда"""
  name: StringOperationFilterInput

  """Аудит добавления"""
  created: AuditMarkerFilterInput

  """Счётчики событий"""
  eventsCounters: FoundationEventsCountersFilterInput
}

"""Разрешения, относящиеся к действиям с конкретным фондом-партнёром"""
type FoundationPermissions {
  """Текущий пользователь может добавить представителя фонда-партнёра"""
  addRepresentative: Boolean!

  """Текущий пользователь может создавать события от лица фонда-партнёра"""
  createEvents: Boolean!

  """Текущий пользователя может редактировать информацию фонда-партнёра"""
  edit: Boolean!

  """Идентификатор фонда-партнёра"""
  id: FoundationId!

  """Текущий пользователь может видеть список представителей фонда-партнёра"""
  viewRepresentatives: Boolean!
}

"""Фонд-партнёр проекта Помощь"""
input FoundationSortInput {
  """Название фонда"""
  name: SortEnumType

  """Описание фонда"""
  description: SortEnumType

  """Идентификатор изображения-логотипа фонда"""
  logoId: SortEnumType

  """Адрес фонда"""
  address: AddressSortInput

  """Счётчики событий"""
  eventsCounters: FoundationEventsCountersSortInput

  """Аудит добавления"""
  created: AuditMarkerSortInput

  """Аудит изменения"""
  updated: AuditMarkerSortInput
}

"""Навык помощника"""
type Skill {
  """Описание навыка"""
  description: String!
  id: SkillId!

  """
  Помощник должен приложить портфолио с работами, связанными с данным навыком
  """
  portfolioIsRequired: Boolean!

  """Название навыка"""
  title: String!
}

"""Разрешения, относящиеся к действиям со счетами"""
type AccountsPermissions {
  """Текущий пользователь может менять состояние счетов"""
  changeStates: Boolean!

  """
  Текущий пользователь может создавать или изменять данные счетов-депозитов
  """
  manageDepositAccounts: Boolean!

  """Текущий пользователь может управлять документами счетов"""
  manageDocuments: Boolean!

  """Текущий пользователь может переводить средства между счетами"""
  transferFunds: Boolean!

  """Текущий пользователь может видеть список счетов-депозитов жертвователя"""
  viewDepositAccounts: Boolean!
}

"""Разрешения, относящиеся к действиям с заказами"""
type OrdersPermissions {
  """Текущий пользователь может создавать новые заказы"""
  create: Boolean!

  """Текущий пользователь может просматривать список счетов"""
  view: Boolean!
}

"""Разрешения, относящиеся к действиям с ваучерами"""
type VouchersPermissions {
  """Текущий пользователь может управлять ваучерами"""
  manage: Boolean!

  """
  Текущий пользователь может просматривать подробную информацию о ваучере
  """
  viewDetails: Boolean!
}

"""Счёт для накопления пожертвований"""
interface Account {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Счёт жертвователя"""
interface BenefactorAccount implements Account {
  """Количество денег на счёте"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Жертвователь и количество денег на счетах-депозитах."""
type BenefactorAndDepositAccountsAmount {
  """Количество денег на счетах-депозитах"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!
}

"""
Счёт-депозит жертвователя, средства с которого могут расходоваться на потребности всех подопечных
"""
type BenefactorDepositAccountForAllWards implements BenefactorAccount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""
Счёт-депозит жертвователя, средства с которого могут расходоваться только на нужды проекта
"""
type BenefactorDepositAccountForProjectNeeds implements BenefactorAccount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""
Счёт-депозит жертвователя, средства с которого могут расходоваться только на потребности конкретных подопечных
"""
type BenefactorDepositAccountForSpecificWards implements BenefactorAccount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Заголовок счёта, для показа в списках"""
  title: String!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!

  """
  Подопечные, на потребности которых могут расходоваться средства данного счёта
  """
  wards: [Ward!]!
}

"""
Счёт-депозит жертвователя, средства с которого могут расходоваться на любые цели
"""
type BenefactorDepositAccountWithoutConditions implements BenefactorAccount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Счёт периода регулярной потребности"""
type RegularNeedPeriodAccount implements Account & AccountWithRequiredAmount {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Потребность"""
  need: Need!

  """Период регулярной потребности"""
  regularNeedPeriod: RegularNeedPeriod!

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!

  """Подопечный"""
  ward: Ward!
}

"""Счёт спецпроекта"""
type SpecialProjectAccount implements Account & AccountWithOptionalRequiredAmount {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Требуемое количество средств"""
  requiredAmount: Int

  """Спецпроект"""
  specialProject: SpecialProject!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Пожертвование"""
input DonationSortInput {
  """Размер пожертвования"""
  amount: SortEnumType

  """Дата пожертвования"""
  createdAt: SortEnumType
}

"""Подписка - регулярные пожертвования"""
interface DonationSubscription {
  """Сумма подписки"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата отмены подписки"""
  cancelledAt: DateTime

  """Дата создания подписки"""
  createdAt: DateTime!
  id: DonationSubscriptionId!

  """Заказ, на основе которого создана подписка"""
  order: Order!
}

"""Пожертвование"""
type Donation {
  """Счёт зачисления средств"""
  account: Account!

  """Размер пожертвования"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Дата пожертвования"""
  createdAt: DateTime!
  id: DonationId!

  """Заказ, на основе которого создано данное пожертвование"""
  order: Order!

  """Подписка"""
  subscription: DonationSubscription
}

"""Подписка на развитие проекта"""
type ProjectDonationSubscription implements DonationSubscription {
  """Сумма подписки"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Причина отмены подписки"""
  cancellationReason: DonationSubscriptionCancellationReason

  """Дата отмены подписки"""
  cancelledAt: DateTime

  """Дата создания подписки"""
  createdAt: DateTime!
  id: DonationSubscriptionId!

  """Заказ, на основе которого создана подписка"""
  order: Order!
}

"""
"Кто поддерживает"
"""
type Supporter {
  """Потраченная сумма"""
  amountSpent: Int!

  """Жертвователь"""
  benefactor: Benefactor!
}

"""Подписка на потребности подопечного"""
type WardDonationSubscription implements DonationSubscription {
  """Сумма подписки"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Причина отмены подписки"""
  cancellationReason: DonationSubscriptionCancellationReason

  """Дата отмены подписки"""
  cancelledAt: DateTime

  """Размер комиссии"""
  commissionAmount: Int

  """Процент комиссии"""
  commissionPercentage: Int

  """Дата создания подписки"""
  createdAt: DateTime!
  id: DonationSubscriptionId!

  """Покрывается ли комиссия жертвователем?"""
  isCommissionCoveredByBenefactor: Boolean

  """Была ли подписка перенесена?"""
  isTransferred: Boolean!

  """Заказ, на основе которого создана подписка"""
  order: Order!

  """Данные переноса подписки на другого подопечного"""
  transfer: WardSubscriptionTransfer

  """Подопечный"""
  ward: Ward!
}

"""Намерение зачислить средства на счёт-депозит жертвователя"""
type BenefactorDepositAccountDonationIntent {
  """Идентификатор счёта-депозита жертвователя"""
  account: Account!

  """Размер вносимого депозита"""
  amount: Int!

  """Дата внесения средств"""
  transferDate: Date!
}

"""Назначение пожертвования или подписки"""
union DonationIntent = ProjectDonationIntent | ProjectSubscriptionIntent | BenefactorDepositAccountDonationIntent | WardOneTimeNeedDonationIntent | WardRegularNeedsDonationIntent | WardsReserveDonationIntent | WardsSubscriptionIntent | SpecialProjectDonationIntent | SubscriptionChargeIntent | LegacyOneTimeDonationIntent | LegacySubscriptionIntent | LegacySubscriptionChargeIntent

"""Устаревшее намерение совершить разовое пожертвование"""
type LegacyOneTimeDonationIntent {
  """Размер пожертвования"""
  amount: Int!
}

"""Устаревшее намерение оплатить ежемесячное списание подписки"""
type LegacySubscriptionChargeIntent {
  """Размер пожертвования"""
  amount: Int!
}

"""Устаревшее намерения совершить подписку"""
type LegacySubscriptionIntent {
  """Размер пожертвования"""
  amount: Int!
}

"""Намерение совершить пожертвование на развитие проекта"""
type ProjectDonationIntent {
  """Размер пожертвования"""
  amount: Int!
}

type ProjectSubscriptionChargeItem implements SubscriptionChargeItem {
  """Размер подписки"""
  amount: Int!
}

"""Намерение подписаться на развитие проекта"""
type ProjectSubscriptionIntent {
  """Размер подписки"""
  amount: Int!
}

"""Намерение совершить пожертвование на спецпроект"""
type SpecialProjectDonationIntent {
  """Размер пожертвования"""
  amount: Int!

  """Размер комиссии"""
  commissionPercentage: Int!

  """Покрывает ли комиссию жертвователь?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Спецпроект"""
  specialProject: SpecialProject!
}

type SubscriptionChargeIntent {
  items: [SubscriptionChargeItem!]!
}

interface SubscriptionChargeItem {
  """Размер подписки"""
  amount: Int!
}

union SubscriptionIntentUnion = ProjectSubscriptionIntent | WardsSubscriptionIntent

"""Намерение совершить пожертвование на разовую потребность подопечного"""
type WardOneTimeNeedDonationIntent {
  """Размер пожертвования"""
  amount: Int!

  """Размер комиссии"""
  commissionPercentage: Int!

  """Покрывает ли комиссию жертвователь?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Потребность"""
  need: Need!
}

"""
Намерение совершить пожертвование на регулярные потребности подопечного
"""
type WardRegularNeedsDonationIntent {
  """Размер пожертвования"""
  amount: Int!

  """Размер комиссии"""
  commissionPercentage: Int!

  """Покрывает ли комиссию жертвователь?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Подопечный"""
  ward: Ward!
}

"""Намерение совершить пожертвование в резерв подопечных"""
type WardsReserveDonationIntent {
  """Размер пожертвования"""
  amount: Int!

  """Размер комиссии"""
  commissionPercentage: Int!

  """Покрывает ли комиссию жертвователь?"""
  isCommissionCoveredByBenefactor: Boolean!
}

"""Намерение подписаться на регулярные потребности указанных подопечных"""
type WardsSubscriptionIntent {
  """Размер комиссии"""
  commissionPercentage: Int!

  """Покрывает ли комиссию жертвователь?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Список подопечных и размеров подписки"""
  wardsSubscriptionsAmounts: [WardSubscriptionAmount!]!
}

type WardSubscriptionChargeItem implements SubscriptionChargeItem {
  """Размер подписки"""
  amount: Int!

  """Размер комиссии"""
  commissionAmount: Int!

  """Подопечный"""
  ward: Ward!
}

"""Заказ"""
input OrderFilterInput {
  and: [OrderFilterInput!]
  or: [OrderFilterInput!]

  """Статус заказа"""
  status: OrderStatusOperationFilterInput

  """Информация о дате, времени и пользователе, создавшем заказ"""
  created: AuditMarkerFilterInput

  """Дата и время последнего изменения данных заказа"""
  updatedAt: DateTimeOperationFilterInput

  """Дата и время, по истечении которых заказ устареет и будет отменён"""
  shouldExpireAt: DateTimeOperationFilterInput

  """Дата и время, в которые заказ стал устаревшим"""
  expiredAt: DateTimeOperationFilterInput

  """Распределение суммы пожертвования согласно намерению жертвователя"""
  intentAmountSummary: OrderAmountSummaryFilterInput

  """Фактическое распределение суммы пожертвования"""
  actualAmountSummary: OrderAmountSummaryFilterInput
}

"""Заказ"""
input OrderSortInput {
  """Статус заказа"""
  status: SortEnumType

  """Информация о дате, времени и пользователе, создавшем заказ"""
  created: AuditMarkerSortInput

  """Дата и время последнего изменения данных заказа"""
  updatedAt: SortEnumType

  """Дата и время, по истечении которых заказ устареет и будет отменён"""
  shouldExpireAt: SortEnumType
}

"""Заказ"""
type Order {
  """Фактическое распределение суммы пожертвования"""
  actualAmountSummary: OrderAmountSummary

  """Сумма заказа"""
  amount: Int!

  """Жертвователь"""
  benefactor: Benefactor!

  """Информация о дате, времени и пользователе, создавшем заказ"""
  created: AuditMarker!

  """Назначение пожертвования"""
  donationIntents: [DonationIntent!]!

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): DonationsConnection

  """Дата и время, в которые заказ стал устаревшим"""
  expiredAt: DateTime

  """Сообщение для показа пользователю в случае ошибки"""
  failureMessage: String
  id: OrderId!

  """Распределение суммы пожертвования согласно намерению жертвователя"""
  intentAmountSummary: OrderAmountSummary

  """Заказ обработан с ошибкой?"""
  isFailed: Boolean!

  """Заказ обработан успешно?"""
  isSucceeded: Boolean!

  """Требование пройти верификацию платежа"""
  paymentChallenge: PaymentChallenge

  """Информация о платеже"""
  paymentDetails: PaymentDetails

  """Способ оплаты"""
  paymentIntent: PaymentIntent

  """Дата и время, по истечении которых заказ устареет и будет отменён"""
  shouldExpireAt: DateTime

  """Статус заказа"""
  status: OrderStatus!

  """Подписки"""
  subscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SubscriptionsConnection

  """Дата и время последнего изменения данных заказа"""
  updatedAt: DateTime!
}

"""
Требование пройти 3DS-верификацию для подтверждения оплаты картой в системе CloudPayments
"""
type CloudPayments3DSecurePaymentChallenge {
  """Адрес страницы подтверждения"""
  acsUrl: String!

  """Данные требования"""
  paReq: String!
}

"""Информация для проведения оплаты через СБП в системе CloudPayments"""
type CloudPaymentsSbpPaymentChallenge {
  """Ссылка на страницу оплаты"""
  link: String!
}

"""Требование пройти верификацию платежа"""
union PaymentChallenge = CloudPayments3DSecurePaymentChallenge | CloudPaymentsSbpPaymentChallenge

"""Информация о банковском переводе средств"""
type BankTransferPaymentDetails {
  """Название контрагента"""
  counterpartyName: String!

  """Номер платёжного документа"""
  documentNumber: String!

  """Назначение платежа"""
  purpose: String!

  """Дата перевода"""
  transferDate: Date!
}

"""
Информация о неуспешном платеже банковской картой в системе CloudPayments
"""
type CloudPaymentsCardFailedPaymentDetails implements CloudPaymentsPaymentDetails & CloudPaymentsCardPaymentDetails {
  """Сообщение для владельца карты"""
  cardholderMessage: String!

  """Тип платёжной карты (Visa, Mastercard, etc)"""
  cardType: String!

  """Маскированный номер платёжной карты"""
  maskedCardNumber: String!

  """Код отказа транзакции"""
  reasonCode: Int!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""
Информация о платеже банковской картой, проведённом через CloudPayments
"""
interface CloudPaymentsCardPaymentDetails implements CloudPaymentsPaymentDetails {
  """Тип платёжной карты (Visa, Mastercard, etc)"""
  cardType: String!

  """Маскированный номер платёжной карты"""
  maskedCardNumber: String!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""
Информация об успешном платеже банковской картой в системе CloudPayments
"""
type CloudPaymentsCardSuccessfulPaymentDetails implements CloudPaymentsPaymentDetails & CloudPaymentsCardPaymentDetails {
  """Код авторизации транзакции"""
  authorizationCode: String!

  """Дата и время авторизации транзакции"""
  authorizationDate: DateTime!

  """Тип платёжной карты (Visa, Mastercard, etc)"""
  cardType: String!

  """Дата и время подтверждения транзакции"""
  confirmDate: DateTime!

  """Маскированный номер платёжной карты"""
  maskedCardNumber: String!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""Информация о платеже, произведённом через CloudPayments"""
interface CloudPaymentsPaymentDetails {
  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""Информация о неуспешном платеже через СБП в системе CloudPayments"""
type CloudPaymentsSbpFailedPaymentDetails implements CloudPaymentsPaymentDetails & CloudPaymentsSbpPaymentDetails {
  message: String!

  """Идентификатор QR-кода от провайдера"""
  providerQrId: String!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""Информация о платеже через СБП, проведённом через CloudPayments"""
interface CloudPaymentsSbpPaymentDetails implements CloudPaymentsPaymentDetails {
  """Идентификатор QR-кода от провайдера"""
  providerQrId: String!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""Информация об успешном платеже через СБП в системе CloudPayments"""
type CloudPaymentsSbpSuccessfulPaymentDetails implements CloudPaymentsPaymentDetails & CloudPaymentsSbpPaymentDetails {
  """Идентификатор QR-кода от провайдера"""
  providerQrId: String!

  """Идентификатор транзакции CloudPayments"""
  transactionId: Long!
}

"""Информация о неизвестной ошибке платежа"""
type GenericFailedPaymentDetails {
  """Сообщение об ошибке"""
  failureMessage: String!
}

"""Данные платежа"""
union PaymentDetails = GenericFailedPaymentDetails | BankTransferPaymentDetails | CloudPaymentsCardSuccessfulPaymentDetails | CloudPaymentsCardFailedPaymentDetails | CloudPaymentsSbpSuccessfulPaymentDetails | CloudPaymentsSbpFailedPaymentDetails | VoucherFailedPaymentDetails | VoucherSuccessfulPaymentDetails

"""Информация об неудачном использовании ваучера"""
type VoucherFailedPaymentDetails {
  """Причина неудачной оплаты"""
  reason: VoucherPaymentFailureReason!

  """Ваучер"""
  voucher: Voucher
}

"""Информация об успешном использовании ваучера"""
type VoucherSuccessfulPaymentDetails {
  """Ваучер"""
  voucher: Voucher!
}

"""Намерение осуществить оплату банковским переводом"""
type BankTransferPaymentIntent {
  """Название контрагента"""
  counterpartyName: String!

  """Номер платёжного документа"""
  documentNumber: String!

  """Назначение платежа"""
  purpose: String!

  """Дата перевода"""
  transferDate: Date!
}

"""Намерение совершить оплату новой (не привязанной) платёжной картой"""
type CloudPaymentsNewCardPaymentIntent {
  """Имя держателя карты, латиницей"""
  cardholderName: String!

  """Криптограмма, созданная API CloudPayments"""
  cryptogram: String!

  """Сохранить карту для будущих платежей?"""
  saveCard: Boolean!

  """Сделать картой по умолчанию?"""
  setAsDefaultCard: Boolean!
}

"""Намерение совершить оплату сохранённой платёжной картой"""
type CloudPaymentsSavedCardPaymentIntent {
  """Сохранённая карта, использующаяся для оплаты"""
  savedCard: CloudPaymentsSavedCard

  """Сделать картой по-умолчанию?"""
  setAsDefaultCard: Boolean!
}

"""Намерение совершить оплату через СБП"""
type CloudPaymentsSbpPaymentIntent {
  anyValue: Boolean
}

"""Способ оплаты заказа"""
union PaymentIntent = BankTransferPaymentIntent | CloudPaymentsNewCardPaymentIntent | CloudPaymentsSavedCardPaymentIntent | CloudPaymentsSbpPaymentIntent | VoucherPaymentIntent

"""Намерение использовать ваучер в качестве средства оплаты"""
type VoucherPaymentIntent {
  """Ваучер, использующийся для оплаты"""
  voucher: Voucher
}

"""
Способ оплаты "Новая банковская карта РФ или МИР"
"""
type CloudPaymentsNewCardPaymentMethod implements PaymentMethod {
  """Указанная карта обязана быть сохранена."""
  cardMustBeSaved: Boolean!

  """Название способа оплаты"""
  title: String!
}

"""
Способ оплаты "Сохранённая банковская карта РФ или МИР"
"""
type CloudPaymentsSavedCardPaymentMethod implements PaymentMethod {
  """Банковская карта по-умолчанию"""
  defaultCard: CloudPaymentsSavedCard

  """Сохранённые банковские карты"""
  savedCards: [CloudPaymentsSavedCard!]!

  """Название способа оплаты"""
  title: String!
}

"""
Способ оплаты "Оплата через СБП"
"""
type CloudPaymentsSbpPaymentMethod implements PaymentMethod {
  """Название способа оплаты"""
  title: String!
}

"""Способ оплаты"""
interface PaymentMethod {
  """Название способа оплаты"""
  title: String!
}

"""Оплата ваучером"""
type VoucherPaymentMethod implements PaymentMethod {
  """Название способа оплаты"""
  title: String!
}

"""Подопечный и сумма подписки"""
type WardSubscriptionAmount {
  """Сумма подписки"""
  amount: Int!

  """Подопечный"""
  ward: Ward!
}

"""Ваучер"""
type Voucher {
  """Код ваучера"""
  code: String!

  """Информация о создании ваучера"""
  created: AuditMarker!
  id: VoucherId!

  """Максимальное разрешённое количество применений"""
  maximumUsageCount: Int!

  """
  Максимальное разрешённое количество использования ваучера одним жертвователем
  """
  maximumUsageCountPerBenefactor: Int!

  """Номинальная сумма ваучера"""
  nominalAmount: Int!

  """Дата и время окончания действия ваучера"""
  notValidAfter: DateTime

  """Дата и время начала действия ваучера"""
  notValidBefore: DateTime

  """Оставшееся количество использований ваучера"""
  remainingUsageCount: Int!

  """Название ваучера"""
  title: String!
}

"""Данные подопечного, использующиеся для финансовых операций"""
input WardFinancesFilterInput {
  and: [WardFinancesFilterInput!]
  or: [WardFinancesFilterInput!]

  """Город подопечного"""
  city: StringOperationFilterInput

  """Агрегированные суммы и счётчики"""
  countsAndAmounts: WardCountsAndAmountsFilterInput

  """Дата и время деактивации подопечного"""
  deactivatedAt: DateTimeOperationFilterInput
}

"""Данные подопечного, использующиеся для финансовых операций"""
input WardFinancesSortInput {
  """Город подопечного"""
  city: SortEnumType

  """Агрегированные суммы и счётчики"""
  countsAndAmounts: WardCountsAndAmountsSortInput

  """Дата и время деактивации подопечного"""
  deactivatedAt: SortEnumType
}

"""Данные подопечного, использующиеся для финансовых операций"""
type WardFinances {
  """Город подопечного"""
  city: String!

  """Агрегированные суммы и счётчики"""
  countsAndAmounts: WardCountsAndAmounts!

  """Дата и время деактивации подопечного"""
  deactivatedAt: DateTime
  ward: Ward!
}

"""Счёт, имеющий ограничение на количество средств"""
interface AccountWithRequiredAmount {
  """Требуемое количество средств"""
  requiredAmount: Int!
}

"""Разрешения, относящиеся к действиям с жертвователями"""
type BenefactorsPermissions {
  """Текущий пользователь может регистрировать новых жертвователей"""
  create: Boolean!

  """Текущий пользователь может просматривать список всех жертвователей"""
  list: Boolean!

  """Текущий пользователь может управлять данными жертвователей"""
  manage: Boolean!
}

"""Параметры для отбора жертвователей"""
input BenefactorFilter {
  and: [BenefactorFilter!]
  or: [BenefactorFilter!]

  """Имя или псевдоним"""
  displayName: StringOperationFilterInput

  """Номер телефона"""
  phoneNumber: StringOperationFilterInput

  """Адрес электронной почты"""
  email: StringOperationFilterInput

  """
  Дата и время первой установки персональных данных (становления Помощником)
  """
  personalDataRegisteredAt: DateTimeOperationFilterInput

  """Дата и время "удаления" (анонимизации) пользователя"""
  anonymizedAt: DateTimeOperationFilterInput
}

"""Разрешения, относящиеся к действиям с конкретным жертвователем"""
type BenefactorPermissions {
  """Текущий пользователь может изменить информацию жертвователя"""
  edit: Boolean!

  """Идентификатор жертвователя"""
  id: BenefactorId!

  """
  Текущий пользователь может просматривать контактную информацию жертвователя
  """
  viewContactInformation: Boolean!

  """
  Текущий пользователь может просматривать персональные данные жертвователя
  """
  viewPaymentInformation: Boolean!

  """
  Текущий пользователь может просматривать персональные данные жертвователя
  """
  viewPersonalData: Boolean!

  """
  Текущий пользователь может видеть рейтинг жертвователя (относится к участию в событиях)
  """
  viewRating: Boolean!

  """
  Текущий пользователь может просматривать информацию, связанную с волонтёрской деятельностью жертвователя
  """
  viewVolunteerInformation: Boolean!
}

"""Параметры для упорядочивания списка жертвователей"""
input BenefactorSort {
  """Имя или псевдоним"""
  displayName: SortEnumType

  """Номер телефона"""
  phoneNumber: SortEnumType
}

"""Информация о жертвователе"""
type Benefactor {
  """Полученные достижения"""
  achievements(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorAchievementsConnection

  """Количество достижений"""
  achievementsCount: Int!

  """Количество средств жертвователя в резервном фонде подопечных"""
  amountOfDonationsInWardsReserveAccount: Int!

  """
  Города, новости/события в которых могут представлять интерес для жертвователя
  """
  citiesOfInterest: [String!]!

  """Сохранённые платёжные карты."""
  cloudPaymentsSavedCards: [CloudPaymentsSavedCard!]!

  """Количество полученных монет"""
  coins: Int!

  """Количество монет, о которых сообщалось пользователю"""
  coinsAccountedByClient: Int!

  """История накопления монет"""
  coinsAccumulationHistory(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CoinsAccumulationHistoryConnection

  """Дата и время регистрации жертвователя"""
  createdAt: DateTime!

  """
  Платёжная карта по-умолчанию для совершения платежей и списания подписки.
  """
  defaultCloudPaymentsSavedCard: CloudPaymentsSavedCard

  """Счёта-депозиты жертвователя"""
  depositAccounts: [Account!]!

  """Имя или псевдоним жертвователя"""
  displayName: String!

  """Адрес электронной почты"""
  email: String

  """Количество неуспешных платежей"""
  failedPaymentsCount: Int!

  """Заявки на участие в событиях фондов-партнёров"""
  foundationEventApplications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventApplicationSortInput!]
    where: FoundationEventApplicationFilterInput
  ): FoundationEventApplicationsConnection

  """Участие в событиях фондов-партнёров"""
  foundationEventAttendance(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventAttendanceSortInput!]
    where: FoundationEventAttendanceFilterInput
  ): FoundationEventAttendanceConnection

  """
  Друзья жертвователя, зарегистрировавшиеся с указанием его кода регистрации
  """
  friends(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): FriendsConnection

  """Не отображать профиль"""
  hideProfile: Boolean!
  id: BenefactorId!

  """
  Находит отменённые подписки и предлагает список подопечных с размерами подписки
  """
  intentsToRecoverCancelledSubscriptions: [SubscriptionIntentUnion!]!

  """Дата и время получения последнего достижения"""
  latestAchievementReceivedAt: DateTime

  """Уведомления (AKA pushes)"""
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): NotificationsConnection

  """Заказы жертвователя"""
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [OrderSortInput!]
    where: OrderFilterInput
  ): OrdersConnection

  """Общая сумма успешных платежей"""
  paymentsAmount: Int!

  """Персональные данные жертвователя"""
  personalData: BenefactorPersonalData

  """
  Дата и время первой установки персональных данных (становления Помощником)
  """
  personalDataRegisteredAt: DateTime

  """Номер телефона"""
  phoneNumber: String

  """Фотография или аватар жертвователя"""
  photo: FileInformation

  """Рейтинг пользователя по итогам участия в событиях"""
  rating: Float

  """Жертвователь, чей код был использован во время регистрации"""
  referrer: Benefactor

  """Навыки"""
  skillsInformation: BenefactorSkillsInformation

  """Текущий статус жертвователя"""
  status: BenefactorStatus

  """Возвращает все доступные статусы жертвователя"""
  statuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorStatusesConnection

  """Подписки"""
  subscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Возвращать все подписки, включая отменённые."""
    includeCancelled: Boolean = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SubscriptionsConnection

  """Переводы"""
  transfers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TransfersConnection

  """Количество непрочитанных сообщений"""
  unreadNotificationsCount: Int

  """Дата и время изменения данных жертвователя"""
  updatedAt: DateTime!

  """Учётная запись, связанная с жертвователем, если она существует"""
  user: User

  """Волонтёрский опыт"""
  volunteerInformation: BenefactorVolunteerInformation

  """Количество подопечных, на которых есть активная подписка"""
  wardsCount: Int!
}

"""Разрешения, относящиеся к разнообразным каталогам данных"""
type CatalogsPermissions {
  """Текущий пользователь может управлять каталогом городов."""
  manageCities: Boolean!
}

"""Разрешения, относящиеся к действиям с информацией об ООО"""
type LimitedLiabilityCompanyPermissions {
  """Текущий пользователь может управлять информацией об ООО"""
  manage: Boolean!
}

"""Отчёт о деятельности ООО"""
input LimitedLiabilityCompanyReportSortInput {
  """Отчётный период - используются только месяц и года"""
  referenceDate: SortEnumType

  """Аудит публикации отчёта"""
  published: AuditMarkerSortInput
}

"""Отчёт о деятельности ООО"""
type LimitedLiabilityCompanyReport implements HaveDocuments {
  """Аудит создания отчёта"""
  created: AuditMarker!

  """Прикреплённые файлы-документы"""
  documents: [Document!]!

  """Уникальный идентификатор"""
  id: ID!

  """Аудит публикации отчёта"""
  published: AuditMarker

  """Отчётный период - используются только месяц и года"""
  referenceDate: Date!

  """Краткое описание отчёта"""
  title: String!

  """Аудит изменения отчёта"""
  updated: AuditMarker!
}

"""Разрешения, относящиеся к действиям со спецпроектами"""
type SpecialProjectsPermissions {
  """Текущий пользователь может управлять спецпроектами"""
  manage: Boolean!
}

"""Спецпроект"""
type SpecialProject implements HaveDocuments {
  """Счёт спецпроекта"""
  account: Account!

  """Адрес проведения"""
  address: Address

  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Информация об отмене"""
  cancelled: AuditMarker

  """Категории"""
  categories: [Category!]!

  """Город проведения"""
  city: String

  """Информация о закрытии"""
  closed: AuditMarker

  """Информация о добавлении"""
  created: AuditMarker!

  """Описание"""
  description: String!

  """Отчётные документы"""
  documents: [Document!]!

  """Дата и время, к которым необходимо собрать указанную сумму"""
  end: DateTime
  id: SpecialProjectId!

  """Изображения"""
  images: [FileInformation!]!

  """Порядок показа"""
  order: Int

  """Информация о публикации"""
  published: AuditMarker

  """Информация об отправке отчёта"""
  reportSent: AuditMarker

  """Дата и время начала сбора средств"""
  start: DateTime!

  """Список помогающих спецпроекту"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Название"""
  title: String!

  """Информация об изменении"""
  updated: AuditMarker!
}

"""Друг жертвователя"""
type BenefactorFriend {
  """Друг жертвователя"""
  friend: Benefactor!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"""Элемент адреса с идентификатором в ФИАС"""
input IdentifiableAddressElementFilterInput {
  and: [IdentifiableAddressElementFilterInput!]
  or: [IdentifiableAddressElementFilterInput!]

  """Идентификатор ФИАС элемента адреса"""
  id: StringOperationFilterInput

  """Значение элемента (название района, города и т.п)"""
  value: StringOperationFilterInput

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: StringOperationFilterInput

  """Тип элемента, полный (город, район и т.п.)"""
  fullType: StringOperationFilterInput

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: StringOperationFilterInput

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: StringOperationFilterInput
}

"""Элемент адреса"""
input AddressElementFilterInput {
  and: [AddressElementFilterInput!]
  or: [AddressElementFilterInput!]

  """Значение элемента (название района, города и т.п)"""
  value: StringOperationFilterInput

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: StringOperationFilterInput

  """Тип элемента, полный (город, район и т.п.)"""
  fullType: StringOperationFilterInput

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: StringOperationFilterInput

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: StringOperationFilterInput
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

enum SortEnumType {
  ASC
  DESC
}

"""Элемент адреса с идентификатором в ФИАС"""
input IdentifiableAddressElementSortInput {
  """Идентификатор ФИАС элемента адреса"""
  id: SortEnumType

  """Значение элемента (название района, города и т.п)"""
  value: SortEnumType

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: SortEnumType

  """Тип элемента, полный (город, район и т.п.)"""
  fullType: SortEnumType

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: SortEnumType

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: SortEnumType
}

"""Элемент адреса"""
input AddressElementSortInput {
  """Значение элемента (название района, города и т.п)"""
  value: SortEnumType

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: SortEnumType

  """Тип элемента, полный (город, район и т.п.)"""
  fullType: SortEnumType

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: SortEnumType

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: SortEnumType
}

"""A connection to a list of items."""
type BenefactorAchievementsConnection {
  """A list of edges."""
  edges: [BenefactorAchievementsEdge!]

  """A flattened list of the nodes."""
  nodes: [BenefactorAchievement]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The `Date` scalar represents an ISO-8601 compliant date type."""
scalar Date

"""A connection to a list of items."""
type RegularNeedPeriodsConnection {
  """A list of edges."""
  edges: [RegularNeedPeriodsEdge!]

  """A flattened list of the nodes."""
  nodes: [RegularNeedPeriod]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

"""Данные паспорта РФ"""
input PassportSortInput {
  """Серия"""
  series: SortEnumType

  """Номер"""
  number: SortEnumType

  """Дата выдачи"""
  dateOfIssue: SortEnumType

  """Код подразделения, выдавшего паспорт"""
  issuerCode: SortEnumType

  """Кем выдан паспорт"""
  issuer: SortEnumType

  """Место рождения"""
  placeOfBirth: SortEnumType
}

"""Имя человека"""
input NomenFilterInput {
  and: [NomenFilterInput!]
  or: [NomenFilterInput!]

  """Имя"""
  firstName: StringOperationFilterInput

  """Отчество"""
  middleName: StringOperationFilterInput

  """Фамилия"""
  lastName: StringOperationFilterInput

  """Полное имя (Имя Отчество Фамилия)"""
  fullName: StringOperationFilterInput

  """Имя для отображения (Имя Фамилия)"""
  displayName: StringOperationFilterInput
}

input DateOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input GenderOperationFilterInput {
  eq: Gender
  neq: Gender
  in: [Gender!]
  nin: [Gender!]
}

input ListCategoryIdOperationFilterInput {
  all: CategoryIdFilterInput
  none: CategoryIdFilterInput
  some: CategoryIdFilterInput
  any: Boolean
}

"""Имя человека"""
input NomenSortInput {
  """Имя"""
  firstName: SortEnumType

  """Отчество"""
  middleName: SortEnumType

  """Фамилия"""
  lastName: SortEnumType

  """Полное имя (Имя Отчество Фамилия)"""
  fullName: SortEnumType

  """Имя для отображения (Имя Фамилия)"""
  displayName: SortEnumType
}

"""Информация о деактивации подопечного"""
input WardDeactivationInformationSortInput {
  """Причина деактивации"""
  reason: SortEnumType

  """Дата деактивации"""
  date: SortEnumType
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input FoundationEventApplicationStatusOperationFilterInput {
  eq: FoundationEventApplicationStatus
  neq: FoundationEventApplicationStatus
  in: [FoundationEventApplicationStatus!]
  nin: [FoundationEventApplicationStatus!]
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

"""Аккумулированные счётчики событий фондов-партнёров"""
input FoundationEventsCountersFilterInput {
  and: [FoundationEventsCountersFilterInput!]
  or: [FoundationEventsCountersFilterInput!]

  """Общее количество событий"""
  total: IntOperationFilterInput

  """Количество активных событий"""
  active: IntOperationFilterInput

  """Количество завершённых событий"""
  closed: IntOperationFilterInput

  """Количество отменённых событий"""
  cancelled: IntOperationFilterInput
}

"""Аккумулированные счётчики событий фондов-партнёров"""
input FoundationEventsCountersSortInput {
  """Общее количество событий"""
  total: SortEnumType

  """Количество активных событий"""
  active: SortEnumType

  """Количество завершённых событий"""
  closed: SortEnumType

  """Количество отменённых событий"""
  cancelled: SortEnumType
}

"""A connection to a list of items."""
type DonationsConnection {
  """A list of edges."""
  edges: [DonationsEdge!]

  """A flattened list of the nodes."""
  nodes: [Donation]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

input OrderStatusOperationFilterInput {
  eq: OrderStatus
  neq: OrderStatus
  in: [OrderStatus!]
  nin: [OrderStatus!]
}

"""Распределение средств по категориям"""
input OrderAmountSummaryFilterInput {
  and: [OrderAmountSummaryFilterInput!]
  or: [OrderAmountSummaryFilterInput!]

  """Разовое пожертвование на подопечных"""
  oneTimeWardDonation: IntOperationFilterInput

  """Разовое пожертвование в резерв подопечных"""
  oneTimeWardsReserveDonation: IntOperationFilterInput

  """Разовое пожертвование на проект"""
  oneTimeProjectDonation: IntOperationFilterInput

  """Пожертвование на спецпроект"""
  specialProjectDonation: IntOperationFilterInput

  """Подписка на подопечных"""
  wardSubscription: IntOperationFilterInput

  """Регулярные пожертвования в резерв подопечных"""
  wardsReserveSubscription: IntOperationFilterInput

  """Подписка на проект"""
  projectSubscription: IntOperationFilterInput

  """Списание подписки на подопечных"""
  wardSubscriptionCharge: IntOperationFilterInput

  """Списание регулярного пожертвования в резерв подопечных"""
  wardsReserveSubscriptionCharge: IntOperationFilterInput

  """Списание подписки на проект"""
  projectSubscriptionCharge: IntOperationFilterInput

  """Размер комиссии"""
  commission: IntOperationFilterInput
}

"""Агрегированные суммы и счётчики"""
input WardCountsAndAmountsFilterInput {
  and: [WardCountsAndAmountsFilterInput!]
  or: [WardCountsAndAmountsFilterInput!]

  """Общее количество средств от действующих подписок"""
  activeSubscriptionsAmount: IntOperationFilterInput

  """Общее количество действующих подписок"""
  activeSubscriptionsCount: IntOperationFilterInput

  """Общее количество средств от всех подписок, действующих и отменённых"""
  totalSubscriptionsAmount: IntOperationFilterInput

  """Общее количество подписок, действующих и отменённых"""
  totalSubscriptionsCount: IntOperationFilterInput

  """Количество действующих потребностей"""
  activeNeedsCount: IntOperationFilterInput

  """Общее количество потребностей, действующих и завершённых"""
  totalNeedsCount: IntOperationFilterInput

  """
  Сумма средств, требуемая для удовлетворения действующих регулярных потребностей
  """
  activeRegularNeedsRequiredAmount: IntOperationFilterInput

  """Количество действующих регулярных потребностей"""
  activeRegularNeedsCount: IntOperationFilterInput

  """
  Сумма средств, требуемая для удовлетворения действующих разовых потребностей
  """
  activeOneTimeNeedsRequiredAmount: IntOperationFilterInput

  """Количество действующих разовых потребностей"""
  activeOneTimeNeedsCount: IntOperationFilterInput

  """Количество средств, собранных для всех разовых потребностей"""
  activeOneTimeNeedsAmount: IntOperationFilterInput

  """Общее количество регулярных потребностей, действующих и завершённых"""
  totalRegularNeedsCount: IntOperationFilterInput

  """Общее количество разовых потребностей, действующих и завершённых"""
  totalOneTimeNeedsCount: IntOperationFilterInput

  """
  Нехватка средств подписки (ActiveRegularNeedsAmount - ActiveSubscriptionsAmount)
  """
  subscriptionsDeficit: IntOperationFilterInput

  """
  Максимальное количество средств, допустимое для хранения на счёте регулярных потребностей
  """
  maximumAllowedRegularNeedsAmount: IntOperationFilterInput

  """Количество средств от подписок на счёте-кошельке"""
  walletSubscriptionDonationsAmount: IntOperationFilterInput

  """Количество средств не от подписок на счёте-кошельке"""
  walletNonSubscriptionDonationsAmount: IntOperationFilterInput

  """
  Количество средств, допустимых для разового пожертвования на регулярные потребности
  """
  maximumAllowedRegularNeedsDonationAmount: IntOperationFilterInput

  """Ожидаемая сумма на счёте-кошельке"""
  estimatedWalletAmount: IntOperationFilterInput
}

"""Агрегированные суммы и счётчики"""
input WardCountsAndAmountsSortInput {
  """Общее количество средств от действующих подписок"""
  activeSubscriptionsAmount: SortEnumType

  """Общее количество действующих подписок"""
  activeSubscriptionsCount: SortEnumType

  """Общее количество средств от всех подписок, действующих и отменённых"""
  totalSubscriptionsAmount: SortEnumType

  """Общее количество подписок, действующих и отменённых"""
  totalSubscriptionsCount: SortEnumType

  """Количество действующих потребностей"""
  activeNeedsCount: SortEnumType

  """Общее количество потребностей, действующих и завершённых"""
  totalNeedsCount: SortEnumType

  """
  Сумма средств, требуемая для удовлетворения действующих регулярных потребностей
  """
  activeRegularNeedsRequiredAmount: SortEnumType

  """Количество действующих регулярных потребностей"""
  activeRegularNeedsCount: SortEnumType

  """
  Сумма средств, требуемая для удовлетворения действующих разовых потребностей
  """
  activeOneTimeNeedsRequiredAmount: SortEnumType

  """Количество действующих разовых потребностей"""
  activeOneTimeNeedsCount: SortEnumType

  """Количество средств, собранных для всех разовых потребностей"""
  activeOneTimeNeedsAmount: SortEnumType

  """Общее количество регулярных потребностей, действующих и завершённых"""
  totalRegularNeedsCount: SortEnumType

  """Общее количество разовых потребностей, действующих и завершённых"""
  totalOneTimeNeedsCount: SortEnumType

  """
  Нехватка средств подписки (ActiveRegularNeedsAmount - ActiveSubscriptionsAmount)
  """
  subscriptionsDeficit: SortEnumType

  """
  Максимальное количество средств, допустимое для хранения на счёте регулярных потребностей
  """
  maximumAllowedRegularNeedsAmount: SortEnumType

  """Количество средств от подписок на счёте-кошельке"""
  walletSubscriptionDonationsAmount: SortEnumType

  """Количество средств не от подписок на счёте-кошельке"""
  walletNonSubscriptionDonationsAmount: SortEnumType

  """
  Количество средств, допустимых для разового пожертвования на регулярные потребности
  """
  maximumAllowedRegularNeedsDonationAmount: SortEnumType

  """Ожидаемая сумма на счёте-кошельке"""
  estimatedWalletAmount: SortEnumType
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""An edge in a connection."""
type BenefactorAchievementsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BenefactorAchievement
}

"""An edge in a connection."""
type RegularNeedPeriodsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RegularNeedPeriod
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

"""An edge in a connection."""
type DonationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Donation
}

"""Счёт разовой потребности"""
type OneTimeNeedAccount implements AccountWithRequiredAmount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Потребность"""
  need: Need!

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!

  """Подопечный"""
  ward: Ward!
}

"""Счёт расхода проекта"""
type ProjectExpenseAccount implements AccountWithRequiredAmount & Account {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Расход проекта"""
  projectExpense: ProjectExpense!

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Счёт для сбора средств на регулярные потребности подопечных"""
type RegularNeedsAccount implements Account {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!

  """Подопечный"""
  ward: Ward!
}

"""Счёт, возможно имеющий ограничение на количество средств"""
interface AccountWithOptionalRequiredAmount {
  """Требуемое количество средств"""
  requiredAmount: Int
}

"""Системный счёт - основной счёт проекта или резерв подопечных"""
type SystemAccount implements Account {
  """Количество денег на счёте"""
  amount: Int!

  """Дата и время закрытия счёта"""
  closedAt: DateTime

  """Пожертвования"""
  donations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [DonationSortInput!]
  ): DonationsConnection
  id: AccountId!

  """Назначение счёта"""
  kind: SystemAccountKind!

  """Счета, с которых можно перевести средства на данный счёт"""
  transferSources: [Account!]!

  """Дата и время последнего обновления счёта"""
  updatedAt: DateTime!
}

"""Отчётный документ или именованный файл"""
type Document {
  """Информация о файле"""
  file: FileInformation!

  """Заголовок/название файла"""
  title: String
}

scalar CategoryId

"""Элемент адреса с идентификатором в ФИАС"""
type IdentifiableAddressElement {
  """Тип элемента, полный (город, район и т.п.)"""
  fullType: String!

  """Идентификатор ФИАС элемента адреса"""
  id: String!

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: String!

  """Значение элемента (название района, города и т.п)"""
  value: String!

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: String!

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: String!
}

"""Элемент адреса"""
type AddressElement {
  """Тип элемента, полный (город, район и т.п.)"""
  fullType: String!

  """Тип элемента, сокращённый (г, р-н и т.п.)"""
  type: String!

  """Значение элемента (название района, города и т.п)"""
  value: String!

  """Значение с полным типом (город Москва, Калужский район и т.п.)"""
  valueWithFullType: String!

  """Значение с сокращённым типом (г Москва, Калужский р-н и т.п.)"""
  valueWithType: String!
}

scalar StoryId

"""
Информация о пользователе и дате и времени совершения какой-либо операции
"""
type AuditMarker {
  """Дата и время совершения операции"""
  timestamp: DateTime!

  """Пользователь, совершивший операцию"""
  user: User
}

scalar AchievementId

scalar BenefactorId

scalar BenefactorAchievementId

scalar BenefactorStatusId

"""Причина начисления сердец жертвователю"""
enum CoinsAccumulationReason {
  """Первый платёж"""
  FIRST_TIME_DONATION

  """Разовый платёж"""
  ONE_TIME_DONATION

  """Новая подписка на подопечного"""
  WARD_SUBSCRIPTION

  """Новая подписка на проект"""
  PROJECT_SUBSCRIPTION

  """Ежемесячное списание подписки"""
  SUBSCRIPTION_CHARGE

  """Регистрация"""
  REGISTRATION

  """Заполнение анкеты помощника"""
  VOLUNTEER_INFORMATION_PROVIDED

  """Участие в деле"""
  FOUNDATION_EVENT_PARTICIPATION

  """Регистрация нового друга"""
  FRIEND_REGISTERED

  """Пожертвование друга"""
  FRIEND_DONATION

  """Комиссия за пожертвование"""
  COMMISSION
}

scalar CoinsAccumulationId

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

scalar BroadcastNotificationId

scalar NotificationId

scalar AccountId

scalar ProjectExpenseId

scalar SpecialProjectId

scalar WardId

scalar NeedId

scalar RegularNeedPeriodId

"""Имя человека"""
type Nomen {
  """Имя для отображения (Имя Фамилия)"""
  displayName: String!

  """Имя"""
  firstName: String!

  """Полное имя (Имя Отчество Фамилия)"""
  fullName: String!

  """Фамилия"""
  lastName: String!

  """Отчество"""
  middleName: String
}

"""Пол подопечного"""
enum Gender {
  """Мужской"""
  MALE

  """Женский"""
  FEMALE
}

scalar FoundationId

scalar FoundationEventId

scalar SkillId

"""Статус заявки на участие в событии"""
enum FoundationEventApplicationStatus {
  """Заявка ещё не рассмотрена"""
  APPLIED

  """Жертвователь выбран как основной участник"""
  SELECTED_AS_PRIMARY

  """Жертвователь выбран как запасной участник"""
  SELECTED_AS_BACKUP

  """Заявка отклонена"""
  DECLINED

  """Заявка отозвана"""
  REVOKED
}

scalar FoundationEventApplicationId

scalar FoundationEventAttendanceId

"""Информация о событии"""
type FoundationEventDetails {
  """Адрес проведения события"""
  address: Address!

  """Файл договора"""
  agreementFile: FileInformation

  """Ссылка на договор"""
  agreementUrl: String

  """Город проведения события"""
  city: String!

  """Описание события"""
  description: String!

  """Изображения события"""
  images: [FileInformation!]!

  """Место сбора/инструкции участникам"""
  meetingInstructions: String

  """Признак необходимости наличия паспорта (для заключения договора)"""
  passportRequired: Boolean!

  """Номер телефона организатора"""
  phoneNumber: String

  """Список требуемых участников"""
  requirements: [FoundationEventParticipationRequirement!]!

  """Дата и время начала события относительно города проведения события"""
  start: DateTime!

  """Временная зона проведения события, в часах"""
  timezoneOffset: TimeSpan!

  """Название события"""
  title: String!
}

"""Счётчики жертвователей, подавших заявку на участие в событии"""
type FoundationEventApplicantsCounters {
  """Количество жертвователей, подавший заявки на участие"""
  applied: Int!

  """Количество жертвователей, реально участвовавших в событии"""
  attended: Int!

  """Количество жертвователей, которым отказано в участии"""
  declined: Int!

  """Количество жертвователей, заявки которых ещё не обработаны фондом"""
  notProcessed: Int!

  """Количество жертвователей, самостоятельно отказавшихся от участия"""
  revoked: Int!

  """Количество жертвователей, отобранных для участия"""
  selected: Int!
}

"""Отчёт о проведении события"""
type FoundationEventReport {
  """Прикреплённые изображения"""
  images: [Document!]!

  """Текст отчёта о событии"""
  text: String!
}

scalar OrderId

scalar DonationSubscriptionId

scalar DonationId

"""Причина отмены подписки"""
enum DonationSubscriptionCancellationReason {
  """Причина не известна"""
  UNKNOWN

  """Подписка отменена жертвователем"""
  CANCELLED_BY_BENEFACTOR

  """Жертвователь удалил (анонимизировал) свой профиль"""
  BENEFACTOR_ANONYMIZED

  """Подписка отменена в связи со смертью подопечного"""
  WARD_PASSED_AWAY

  """Подписка отменена так как подопечный деактивирован"""
  WARD_DEACTIVATED

  """
  Подписка отменена для переоформления в связи с изменением размера комиссии
  """
  COMMISSION_CHANGED

  """Подписка отменена в связи с невозможностью списать средства с карты"""
  SUBSCRIPTION_CHARGE_FAILED

  """Подписка отменена, так как у пользователя нет привязанной карты"""
  CARD_NOT_BOUND

  """Подписка отменена по техническим причинам"""
  TECHNICAL
}

"""Перенос подписки от умершего подопечного"""
type WardSubscriptionTransfer {
  """Дата отправки следующего оповещения"""
  nextNotificationAt: DateTime!

  """Дата отправки последнего оповещения"""
  notificationSentAt: DateTime!

  """Количество отправленных оповещений"""
  sentNotificationsCount: Int!

  """Дата начала переноса подписки"""
  transferInitiatedAt: DateTime!
}

"""Распределение средств по категориям"""
type OrderAmountSummary {
  """Размер комиссии"""
  commission: Int!

  """Разовое пожертвование на проект"""
  oneTimeProjectDonation: Int!

  """Разовое пожертвование на подопечных"""
  oneTimeWardDonation: Int!

  """Разовое пожертвование в резерв подопечных"""
  oneTimeWardsReserveDonation: Int!

  """Подписка на проект"""
  projectSubscription: Int!

  """Списание подписки на проект"""
  projectSubscriptionCharge: Int!

  """Пожертвование на спецпроект"""
  specialProjectDonation: Int!

  """Регулярные пожертвования в резерв подопечных"""
  wardsReserveSubscription: Int!

  """Списание регулярного пожертвования в резерв подопечных"""
  wardsReserveSubscriptionCharge: Int!

  """Подписка на подопечных"""
  wardSubscription: Int!

  """Списание подписки на подопечных"""
  wardSubscriptionCharge: Int!
}

enum OrderStatus {
  """Заказ создан"""
  CREATED

  """Ожидается оплата заказа"""
  PAYMENT_IN_PROGRESS

  """
  Необходимо вмешательство пользователя для продолжения оплаты (например, ввести 3D Secure код)
  """
  PAYMENT_CHALLENGE

  """Платёж успешно завершён"""
  PAYMENT_SUCCEEDED

  """Обработка заказа завершена"""
  COMPLETED

  """Платёж не удался"""
  PAYMENT_FAILED

  """Заказ устарел"""
  EXPIRED
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""Причина неудачной оплаты заказа ваучером"""
enum VoucherPaymentFailureReason {
  """Ваучер с указанным идентификатором не найден"""
  NOT_FOUND

  """Ваучер с указанным идентификатором недействителен"""
  NOT_VALID

  """Номинал ваучера меньше требуемой суммы"""
  INSUFFICIENT_AMOUNT

  """Номинал ваучера превышает требуемую сумму"""
  EXCESS_AMOUNT

  """Слишком много использований ваучера"""
  USAGE_COUNT_EXCEEDED

  """Слишком много использований ваучера для данного жертвователя"""
  USAGE_COUNT_PER_BENEFACTOR_EXCEEDED
}

scalar VoucherId

scalar CloudPaymentsSavedCardId

"""Информация о сохранённой в системе CloudPayments банковской карте"""
type CloudPaymentsSavedCard {
  """Жертвователь"""
  benefactorId: BenefactorId!

  """Срок действия карты"""
  cardExpirationDate: String!

  """Имя владельца карты"""
  cardholderName: String!

  """Тип карты (VISA/Mastercard/MIR/etc)"""
  cardType: String!

  """Причина последней неуспешной попытки списания средств"""
  failureMessage: String

  """Количество неуспешных попыток списания средств"""
  failuresCount: Int!
  id: CloudPaymentsSavedCardId!

  """Безопасный для показа номер карты"""
  maskedCardNumber: String!

  """Платёжный токен; используется для платежей вместо данных карты"""
  token: String!
}

"""Агрегированные суммы и счётчики"""
type WardCountsAndAmounts {
  """Количество действующих потребностей"""
  activeNeedsCount: Int!

  """Количество средств, собранных для всех разовых потребностей"""
  activeOneTimeNeedsAmount: Int!

  """Количество действующих разовых потребностей"""
  activeOneTimeNeedsCount: Int!

  """
  Сумма средств, требуемая для удовлетворения действующих разовых потребностей
  """
  activeOneTimeNeedsRequiredAmount: Int!

  """Количество действующих регулярных потребностей"""
  activeRegularNeedsCount: Int!

  """
  Сумма средств, требуемая для удовлетворения действующих регулярных потребностей
  """
  activeRegularNeedsRequiredAmount: Int!

  """Общее количество средств от действующих подписок"""
  activeSubscriptionsAmount: Int!

  """Общее количество действующих подписок"""
  activeSubscriptionsCount: Int!

  """Ожидаемая сумма на счёте-кошельке"""
  estimatedWalletAmount: Int!

  """
  Максимальное количество средств, допустимое для хранения на счёте регулярных потребностей
  """
  maximumAllowedRegularNeedsAmount: Int!

  """
  Количество средств, допустимых для разового пожертвования на регулярные потребности
  """
  maximumAllowedRegularNeedsDonationAmount: Int!

  """
  Нехватка средств подписки (ActiveRegularNeedsAmount - ActiveSubscriptionsAmount)
  """
  subscriptionsDeficit: Int!

  """Общее количество потребностей, действующих и завершённых"""
  totalNeedsCount: Int!

  """Общее количество разовых потребностей, действующих и завершённых"""
  totalOneTimeNeedsCount: Int!

  """Общее количество регулярных потребностей, действующих и завершённых"""
  totalRegularNeedsCount: Int!

  """Общее количество средств от всех подписок, действующих и отменённых"""
  totalSubscriptionsAmount: Int!

  """Общее количество подписок, действующих и отменённых"""
  totalSubscriptionsCount: Int!

  """Количество средств не от подписок на счёте-кошельке"""
  walletNonSubscriptionDonationsAmount: Int!

  """Количество средств от подписок на счёте-кошельке"""
  walletSubscriptionDonationsAmount: Int!
}

"""A connection to a list of items."""
type AchievementsConnection {
  """A list of edges."""
  edges: [AchievementsEdge!]

  """A flattened list of the nodes."""
  nodes: [Achievement]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type BenefactorsCoinsAccumulationRatingConnection {
  """A list of edges."""
  edges: [BenefactorsCoinsAccumulationRatingEdge!]

  """A flattened list of the nodes."""
  nodes: [BenefactorsCoinsAccumulationRatingEntry!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type CoinsAccumulationHistoryConnection {
  """A list of edges."""
  edges: [CoinsAccumulationHistoryEdge!]

  """A flattened list of the nodes."""
  nodes: [CoinsAccumulation!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type BenefactorStatusesConnection {
  """A list of edges."""
  edges: [BenefactorStatusesEdge!]

  """A flattened list of the nodes."""
  nodes: [BenefactorStatus!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type NotificationsConnection {
  """A list of edges."""
  edges: [NotificationsEdge!]

  """A flattened list of the nodes."""
  nodes: [Notification!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type BroadcastNotificationsConnection {
  """A list of edges."""
  edges: [BroadcastNotificationsEdge!]

  """A flattened list of the nodes."""
  nodes: [BroadcastNotification!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type ProjectExpensesConnection {
  """A list of edges."""
  edges: [ProjectExpensesEdge!]

  """A flattened list of the nodes."""
  nodes: [ProjectExpense!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type StoryBlockWithSpecifiedLabelAlreadyExistsError implements Error {
  message: String!
}

type StoryBlockWithStoriesCanNotBeDeletedError implements Error {
  message: String!
}

type StoryWithoutScreensCanNotBePublishedError implements Error {
  message: String!
}

"""A connection to a list of items."""
type StoriesConnection {
  """A list of edges."""
  edges: [StoriesEdge!]

  """A flattened list of the nodes."""
  nodes: [Story!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type SearchConnection {
  """A list of edges."""
  edges: [SearchEdge!]

  """A flattened list of the nodes."""
  nodes: [SearchResultItem]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type CategoryNotFoundError implements Error {
  message: String!
}

type CityNotFoundError implements Error {
  cityName: String!
  message: String!
}

"""A connection to a list of items."""
type WardsConnection {
  """A list of edges."""
  edges: [WardsEdge!]

  """A flattened list of the nodes."""
  nodes: [Ward!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type ClientVersionAlreadyExistsError implements Error {
  client: ClientApplication!
  major: Int!
  message: String!
  minor: Int!
  patch: Int!
}

"""A connection to a list of items."""
type ClientVersionsConnection {
  """A list of edges."""
  edges: [ClientVersionsEdge!]

  """A flattened list of the nodes."""
  nodes: [ClientVersion!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type PhoneNumberAlreadyRegisteredError implements Error {
  message: String!
  phoneNumber: String!
}

type UserPersistenceError implements Error {
  message: String!
}

type ForbiddenForUserError implements Error {
  message: String!
}

type UserCommunicationError implements Error {
  message: String!
  reason: String!
}

type UserNotFoundError implements Error {
  message: String!
  userId: ID!
}

type EmailAlreadyRegisteredError implements Error {
  email: String!
  message: String!
}

type UserCanNotBeDeletedError implements Error {
  message: String!
}

type RegistrationProhibitedError implements Error {
  message: String!
}

"""A connection to a list of items."""
type AdministratorsConnection {
  """A list of edges."""
  edges: [AdministratorsEdge!]

  """A flattened list of the nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type RepresentativesConnection {
  """A list of edges."""
  edges: [RepresentativesEdge!]

  """A flattened list of the nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type BenefactorPersonalDataMissingError implements Error {
  message: String!
}

type FoundationEventRegistrationClosedError implements Error {
  message: String!
}

type InvalidFoundationEventAttendanceCodeError implements Error {
  message: String!
}

type FoundationEventReportDoesNotExistsError implements Error {
  message: String!
}

"""A connection to a list of items."""
type FoundationEventApplicationsConnection {
  """A list of edges."""
  edges: [FoundationEventApplicationsEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEventApplication!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type FoundationEventAttendanceConnection {
  """A list of edges."""
  edges: [FoundationEventAttendanceEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEventAttendance!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type ApplicationsConnection {
  """A list of edges."""
  edges: [ApplicationsEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEventApplication!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type AttendancesConnection {
  """A list of edges."""
  edges: [AttendancesEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEventAttendance!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type EventsConnection {
  """A list of edges."""
  edges: [EventsEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEvent!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type FoundationEventsConnection {
  """A list of edges."""
  edges: [FoundationEventsEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEvent!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type FoundationEventsPendingApprovalConnection {
  """A list of edges."""
  edges: [FoundationEventsPendingApprovalEdge!]

  """A flattened list of the nodes."""
  nodes: [FoundationEvent!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type FoundationPersistenceError implements Error {
  message: String!
}

"""A connection to a list of items."""
type FoundationsConnection {
  """A list of edges."""
  edges: [FoundationsEdge!]

  """A flattened list of the nodes."""
  nodes: [Foundation!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type DepositAccountAlreadyExistsError implements Error {
  message: String!
}

type FundsTransferProhibitedError implements Error {
  message: String!
}

"""A connection to a list of items."""
type BenefactorsWithDepositAccountsConnection {
  """A list of edges."""
  edges: [BenefactorsWithDepositAccountsEdge!]

  """A flattened list of the nodes."""
  nodes: [BenefactorAndDepositAccountsAmount!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type SubscriptionsConnection {
  """A list of edges."""
  edges: [SubscriptionsEdge!]

  """A flattened list of the nodes."""
  nodes: [DonationSubscription]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type TransfersConnection {
  """A list of edges."""
  edges: [TransfersEdge!]

  """A flattened list of the nodes."""
  nodes: [Donation!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type ProjectSubscriptionsConnection {
  """A list of edges."""
  edges: [ProjectSubscriptionsEdge!]

  """A flattened list of the nodes."""
  nodes: [ProjectDonationSubscription!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type SupportersConnection {
  """A list of edges."""
  edges: [SupportersEdge!]

  """A flattened list of the nodes."""
  nodes: [Supporter!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type BenefactorDonationsConnection {
  """A list of edges."""
  edges: [BenefactorDonationsEdge!]

  """A flattened list of the nodes."""
  nodes: [Donation!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type OrderPlacementError implements Error {
  message: String!
}

"""A connection to a list of items."""
type OrdersConnection {
  """A list of edges."""
  edges: [OrdersEdge!]

  """A flattened list of the nodes."""
  nodes: [Order!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type WardSubscriptionsConnection {
  """A list of edges."""
  edges: [WardSubscriptionsEdge!]

  """A flattened list of the nodes."""
  nodes: [WardDonationSubscription!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type WardsFinancesConnection {
  """A list of edges."""
  edges: [WardsFinancesEdge!]

  """A flattened list of the nodes."""
  nodes: [WardFinances!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type BenefactorsConnection {
  """A list of edges."""
  edges: [BenefactorsEdge!]

  """A flattened list of the nodes."""
  nodes: [Benefactor!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type CityAlreadyExistsError implements Error {
  message: String!
  name: String!
}

type CityIsAssignedError implements Error {
  message: String!
  name: String!
}

"""Город"""
input CitySortInput {
  """Название города"""
  name: SortEnumType

  """Показывать город в списке городов по-умолчанию"""
  default: SortEnumType

  """Порядок показа города в списке городов по-умолчанию"""
  order: SortEnumType
  id: SortEnumType
}

"""A connection to a list of items."""
type CitiesConnection {
  """A list of edges."""
  edges: [CitiesEdge!]

  """A flattened list of the nodes."""
  nodes: [City!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type ReportsConnection {
  """A list of edges."""
  edges: [ReportsEdge!]

  """A flattened list of the nodes."""
  nodes: [LimitedLiabilityCompanyReport!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type PublishedReportsConnection {
  """A list of edges."""
  edges: [PublishedReportsEdge!]

  """A flattened list of the nodes."""
  nodes: [LimitedLiabilityCompanyReport!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type RequiredAmountIsLessThanCollectedAmountError implements Error {
  accountId: AccountId!
  message: String!
}

"""A connection to a list of items."""
type SpecialProjectsConnection {
  """A list of edges."""
  edges: [SpecialProjectsEdge!]

  """A flattened list of the nodes."""
  nodes: [SpecialProject!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A connection to a list of items."""
type FriendsConnection {
  """A list of edges."""
  edges: [FriendsEdge!]

  """A flattened list of the nodes."""
  nodes: [BenefactorFriend!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AchievementsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Achievement
}

"""An edge in a connection."""
type BenefactorsCoinsAccumulationRatingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BenefactorsCoinsAccumulationRatingEntry!
}

"""An edge in a connection."""
type CoinsAccumulationHistoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CoinsAccumulation!
}

"""An edge in a connection."""
type BenefactorStatusesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BenefactorStatus!
}

"""An edge in a connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification!
}

"""Широковещательное уведомление"""
type BroadcastNotification {
  """Текст кнопки"""
  buttonText: String

  """Адрес перехода по нажатию кнопки"""
  buttonUrl: String

  """Информация о создании объекта"""
  created: AuditMarker!

  """Сообщение об ошибке, если такая возникла во время рассылки"""
  errorMessage: String

  """Файл со списком получателей уведомления"""
  fileWithListOfRecipients: FileInformation
  id: BroadcastNotificationId!

  """Изображения уведомления"""
  images: [FileInformation!]!

  """Количество созданных уведомлений"""
  populatedNotificationsCount: Int!

  """Получатели уведомления"""
  recipients: BroadcastNotificationRecipients

  """Статус уведомления"""
  status: BroadcastNotificationStatus!

  """Текст уведомления"""
  text: String!

  """Заголовок уведомления"""
  title: String!
}

"""An edge in a connection."""
type BroadcastNotificationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BroadcastNotification!
}

"""An edge in a connection."""
type ProjectExpensesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProjectExpense!
}

interface Error {
  message: String!
}

"""История."""
type Story {
  """Информация о создании истории."""
  created: AuditMarker!
  id: StoryId!

  """Изображение для ленты историй"""
  image: FileInformation

  """Порядок следования истории в блоке."""
  order: Int!

  """Информация о публикации истории."""
  published: AuditMarker

  """Экраны истории."""
  screens: [StoryScreen!]!

  """Блок истории"""
  storyBlock: StoryBlock!

  """Заголовок истории."""
  title: String!

  """Информация о последнем обновлении истории."""
  updated: AuditMarker!
}

"""An edge in a connection."""
type StoriesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Story!
}

"""An edge in a connection."""
type SearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SearchResultItem
}

"""Подопечный"""
type Ward {
  """
  Список счетов-депозитов, средства которых можно расходовать на потребности данного подопечного
  """
  benefactorDepositAccounts: [BenefactorDepositAccountForSpecificWards!]!

  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Агрегированные суммы и счётчики"""
  countsAndAmounts: WardCountsAndAmounts!

  """Аудит добавления"""
  created: AuditMarker!

  """Информация о деактивации подопечного"""
  deactivationInformation: WardDeactivationInformation
  id: WardId!

  """Подопечному требуется немедленная помощь"""
  immediateHelpRequired: Boolean!

  """Список потребностей"""
  needs: [Need!]!

  """Частная информация о подопечном"""
  privateInformation: WardPrivateInformation

  """Общедоступная информация о подопечном"""
  publicInformation: WardPublicInformation!

  """Подопечный доступен для просмотра жертвователями"""
  published: Boolean!

  """Информация о регулярных потребностях"""
  regularNeeds: WardRegularNeeds!

  """Счёт для сбора средств на регулярные потребности"""
  regularNeedsAccount: RegularNeedsAccount!

  """Подписки"""
  subscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Возвращать все подписки, включая отменённые"""
    includeCancelled: Boolean! = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WardSubscriptionsConnection

  """Разрешено ли переносить подписки на данного подопечного?"""
  subscriptionTransferEnabled: Boolean!

  """Список помогающих подопечному"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Аудит изменения"""
  updated: AuditMarker!
}

"""An edge in a connection."""
type WardsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Ward!
}

"""Информация о версии клиента"""
type ClientVersion {
  """Идентификатор клиента"""
  client: ClientApplication!

  """Уникальный идентификатор"""
  id: ID!

  """MAJOR-часть версии клиента"""
  major: Int!

  """Признак обязательности обновления"""
  mandatory: Boolean!

  """MINOR-часть версии клиента"""
  minor: Int!

  """PATCH-часть версии клиента"""
  patch: Int!
}

"""An edge in a connection."""
type ClientVersionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ClientVersion!
}

"""An edge in a connection."""
type AdministratorsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

"""An edge in a connection."""
type RepresentativesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

"""An edge in a connection."""
type FoundationEventApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEventApplication!
}

"""An edge in a connection."""
type FoundationEventAttendanceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEventAttendance!
}

"""An edge in a connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEventApplication!
}

"""An edge in a connection."""
type AttendancesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEventAttendance!
}

"""An edge in a connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEvent!
}

"""An edge in a connection."""
type FoundationEventsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEvent!
}

"""An edge in a connection."""
type FoundationEventsPendingApprovalEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FoundationEvent!
}

"""Фонд-партнёр проекта Помощь"""
type Foundation {
  """Адрес фонда"""
  address: Address!

  """Аудит добавления"""
  created: AuditMarker!

  """Описание фонда"""
  description: String!

  """События фонда-партнёра"""
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [FoundationEventSortInput!]
    where: FoundationEventFilterInput
  ): EventsConnection

  """Счётчики событий"""
  eventsCounters: FoundationEventsCounters!
  id: FoundationId!

  """Логотип фонда-партнёра"""
  logo: FileInformation

  """Название фонда"""
  name: String!

  """Представители фонда"""
  representatives(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [AdministratorsSortInput!]
  ): RepresentativesConnection

  """Аудит изменения"""
  updated: AuditMarker!
}

"""An edge in a connection."""
type FoundationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Foundation!
}

"""An edge in a connection."""
type BenefactorsWithDepositAccountsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BenefactorAndDepositAccountsAmount!
}

"""An edge in a connection."""
type SubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DonationSubscription
}

"""An edge in a connection."""
type TransfersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Donation!
}

"""An edge in a connection."""
type ProjectSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProjectDonationSubscription!
}

"""An edge in a connection."""
type SupportersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Supporter!
}

"""An edge in a connection."""
type BenefactorDonationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Donation!
}

"""An edge in a connection."""
type OrdersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Order!
}

"""An edge in a connection."""
type WardSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WardDonationSubscription!
}

"""An edge in a connection."""
type WardsFinancesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WardFinances!
}

"""An edge in a connection."""
type BenefactorsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Benefactor!
}

"""Город"""
type City {
  """Показывать город в списке городов по-умолчанию"""
  default: Boolean!
  id: CityId!

  """Название города"""
  name: String!

  """Порядок показа города в списке городов по-умолчанию"""
  order: Int!
}

"""An edge in a connection."""
type CitiesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: City!
}

"""An edge in a connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LimitedLiabilityCompanyReport!
}

"""An edge in a connection."""
type PublishedReportsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LimitedLiabilityCompanyReport!
}

"""An edge in a connection."""
type SpecialProjectsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SpecialProject!
}

"""An edge in a connection."""
type FriendsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BenefactorFriend!
}

scalar CityId

"""Требования к участнику события"""
type FoundationEventParticipationRequirement {
  """Автоматически выбирать заявки для участия в мероприятии"""
  autoSelect: Boolean!

  """Комментарий для участника"""
  description: String

  """Требуемое количество участников"""
  quantity: Int!

  """Требуемый навык"""
  skill: Skill!
}

"""The `TimeSpan` scalar represents an ISO-8601 compliant duration type."""
scalar TimeSpan

"""Параметры отмены спецпроекта"""
input CancelSpecialProjectInput {
  """Идентификатор спецпроекта"""
  id: SpecialProjectId!

  """Причина отмены спецпроекта"""
  reason: String!
}

"""Параметры изменения данных спецпроекта"""
input UpdateSpecialProjectInput {
  """Адрес"""
  address: String

  """Категории"""
  categories: [CategoryId!]!

  """Город"""
  city: String

  """Описание"""
  description: String!

  """Дата, к которой требуется собрать средства"""
  end: DateTime

  """Идентификатор спецпроекта."""
  id: SpecialProjectId!

  """Изображения"""
  images: [String!]!

  """Необходимая сумма"""
  requiredAmount: Int

  """Дата начала сбора средств"""
  start: DateTime!

  """Название"""
  title: String!
}

"""Параметры обновления документов спецпроекта"""
input UpdateSpecialProjectDocumentsInput {
  """Документы"""
  documents: [DocumentInput!]!

  """Идентификатор спецпроекта."""
  id: SpecialProjectId!
}

"""Параметры создания нового спецпроекта"""
input CreateSpecialProjectInput {
  """Адрес"""
  address: String

  """Категории"""
  categories: [CategoryId!]!

  """Город"""
  city: String

  """Описание"""
  description: String!

  """Дата, к которой требуется собрать средства"""
  end: DateTime

  """Изображения"""
  images: [String!]!

  """Необходимая сумма"""
  requiredAmount: Int

  """Дата начала сбора средств"""
  start: DateTime!

  """Название"""
  title: String!
}

"""Параметры для обновления отчёта ООО"""
input UpdateLimitedLiabilityCompanyReportInput {
  """Идентификатор отчёта"""
  id: ID!
  referenceDate: Date!
  title: String!
}

"""Параметры обновления документов отчёта ООО"""
input UpdateLimitedLiabilityCompanyReportDocumentsInput {
  """Документы отчёта"""
  documents: [DocumentInput!]!

  """Идентификатор отчёта"""
  id: ID!
}

"""Параметры обновления баланса ООО"""
input UpdateLimitedLiabilityCompanyBalanceInput {
  """Новое значение баланса"""
  balance: Int!
}

"""
Информация о балансе ООО - коммерческой компании Фонда "Помощь", направленной на продажу мерча и
передаче прибыли в Фонд.
"""
type LimitedLiabilityCompany {
  """Баланс ООО"""
  balance: Int!

  """Опубликованные отчёты о деятельности ООО"""
  publishedReports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [LimitedLiabilityCompanyReportSortInput!]
  ): PublishedReportsConnection

  """Отчёты о деятельности ООО"""
  reports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [LimitedLiabilityCompanyReportSortInput!]
  ): ReportsConnection

  """Аудит обновления объекта"""
  updated: AuditMarker!
}

"""Параметры публикации отчёта ООО"""
input PublishLimitedLiabilityCompanyReportInput {
  """Идентификатор отчёта"""
  id: ID!
}

"""Параметры для создания отчёта ООО"""
input CreateLimitedLiabilityCompanyReportInput {
  referenceDate: Date!
  title: String!
}

"""Параметры изменения данных города"""
input UpdateCityInput {
  """Показывать город в списке городов по-умолчанию"""
  default: Boolean!

  """Идентификатор города"""
  id: CityId!

  """Название города"""
  name: String!

  """Порядок показа города в списке городов по-умолчанию"""
  order: Int!
}

"""Параметры удаления города."""
input DeleteCityInput {
  """Идентификатор города."""
  id: CityId!
}

"""Параметры добавления нового города"""
input AddCityInput {
  """Показывать город в списке городов по-умолчанию"""
  default: Boolean!

  """Название города"""
  name: String!

  """Порядок показа города в списке городов по-умолчанию"""
  order: Int!
}

"""Перечисление возможных получателей широковещательных уведомлений"""
enum BroadcastNotificationRecipients {
  """Все жертвователи"""
  EVERYONE

  """Жертвователи, ни разу не перечислявшие денег"""
  NEVER_DONATED

  """
  Жертвователи, хоть раз перечислившие деньги (на проект или на подопечных)
  """
  DONATED

  """Жертвователи, хоть раз перечислившие деньги на подопечных"""
  DONATED_TO_WARDS

  """Жертвователи, хоть раз перечислившие деньги на проект"""
  DONATED_TO_PROJECT

  """Жертвователи, ни разу не оформлявшие подписку"""
  WITHOUT_SUBSCRIPTIONS

  """Жертвователи с действующими подписками (на проект или на подопечных)"""
  WITH_ACTIVE_SUBSCRIPTIONS

  """Жертвователи с действующими подписками на подопечных"""
  WITH_ACTIVE_WARD_SUBSCRIPTIONS

  """Жертвователи с действующими подписками на проект"""
  WITH_ACTIVE_PROJECT_SUBSCRIPTIONS

  """
  Жертвователи без действующих подписок, но имеющие отменённые подписки (на проект или на подопечных)
  """
  WITHOUT_ACTIVE_SUBSCRIPTIONS

  """
  Жертвователи без действующих подписок, но имеющие отменённые подписки на подопечных
  """
  WITHOUT_ACTIVE_BUT_WITH_CANCELLED_WARD_SUBSCRIPTIONS

  """
  Жертвователи без действующих подписок, но имеющие отменённые подписки на проект
  """
  WITHOUT_ACTIVE_BUT_WITH_CANCELLED_PROJECT_SUBSCRIPTIONS

  """
  Жертвователи, у которых есть активные подписки и на подопечных и на проект
  """
  WITH_ACTIVE_PROJECT_AND_WARDS_SUBSCRIPTIONS

  """
  Жертвователи, у которых есть активные подписки на подопечных, но нет активных подписок на проект
  """
  WITH_ACTIVE_PROJECT_BUT_WITHOUT_ACTIVE_WARDS_SUBSCRIPTIONS

  """
  Жертвователи, у которых есть активные подписки на проект, но нет активных подписок на подопечных
  """
  WITH_ACTIVE_WARDS_BUT_WITHOUT_ACTIVE_PROJECT_SUBSCRIPTIONS
}

"""Параметры изменения информации жертвователя"""
input UpdateBenefactorInput {
  """Имя"""
  displayName: String!

  """Идентификатор файла-фотографии жертвователя"""
  photoId: String

  """Код друга, пригласившего зарегистрироваться"""
  referrerCode: String
}

"""Параметры изменения адреса электронной почты жертвователя"""
input UpdateBenefactorEmailInput {
  """Адрес электронной почты"""
  email: String!
}

"""
Параметры изменения адреса электронной почты жертвователя администратором платформы
"""
input UpdateBenefactorEmailByAdministratorInput {
  benefactorId: BenefactorId!

  """Адрес электронной почты"""
  email: String
}

"""Параметры изменения информации жертвователя администратором платформы"""
input UpdateBenefactorByAdministratorInput {
  benefactorId: BenefactorId!

  """Имя"""
  displayName: String!

  """Идентификатор файла-фотографии жертвователя"""
  photoId: String
}

"""Параметры добавления нового жертвователя"""
input CreateBenefactorInput {
  """Имя"""
  displayName: String!

  """Адрес электронной почты"""
  email: String

  """Скрывать профиль"""
  hideProfile: Boolean!

  """Номер телефона"""
  phoneNumber: String

  """Идентификатор файла-фотографии жертвователя"""
  photoId: String
}

"""Параметры изменения видимости профиля жертвователя"""
input ChangeBenefactorProfileVisibilityInput {
  """Скрывать профиль жертвователя"""
  hideProfile: Boolean!
}

"""Назначение системного счёта"""
enum SystemAccountKind {
  """Основной счёт проекта"""
  MAIN

  """Резерв подопечных"""
  WARDS_RESERVE
}

"""Информация о регулярных потребностях подопечного"""
type WardRegularNeeds {
  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Количество средств от подписок, созданных до текущего месяца"""
  existingSubscriptionsAmount: Int!

  """Количество средств от подписок, созданных в текущем месяце"""
  newSubscriptionsAmount: Int!

  """Общая сумма всех разовых пожертвований на регулярные потребности"""
  oneTimeDonationsAmount: Int!

  """Кто помогает"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Выбирать только пожертвования текущего календарного месяца"""
    onlyCurrentMonth: Boolean = false
  ): SupportersConnection
}

input DonationIntentInput {
  """Намерение пополнить счёт-депозит жертвователя"""
  depositToBenefactorAccount: BenefactorDepositAccountDonationIntentInput

  """Намерение совершить пожертвование на развитие проекта"""
  projectDonation: ProjectDonationIntentInput

  """Намерение подписаться на развитие проекта"""
  projectSubscription: ProjectSubscriptionIntentInput

  """Намерение совершить пожертвование на спецпроект"""
  specialProjectDonation: SpecialProjectDonationIntentInput

  """Намерение совершить пожертвование на разовую потребность подопечного"""
  wardOneTimeNeedDonation: WardOneTimeNeedDonationIntentInput

  """
  Намерение совершить пожертвование на регулярные потребности подопечного
  """
  wardRegularNeedsDonation: WardRegularNeedsDonationIntentInput

  """Намерение совершить пожертвование в резерв подопечных"""
  wardsReserveDonation: WardsReserveDonationIntentInput

  """Намерение подписаться на регулярные потребности указанных подопечных"""
  wardsSubscription: WardsSubscriptionIntentInput
}

"""Информация для создания нового заказа"""
type NewOrderInformation {
  """Доступные способы оплаты"""
  availablePaymentMethods: [PaymentMethod!]!

  """Предлагаемые размеры комиссии"""
  commissionPercentageSuggestions: [CommissionPercentageSuggestion!]!
}

input RespondToPaymentChallengeInput {
  orderId: OrderId!
  response: PaymentChallengeResponseInput!
}

"""Параметры размещения заказа"""
input PlaceOrderInput {
  """Идентификатор жертвователя, от лица которого создаётся заказ"""
  benefactorId: BenefactorId

  """Текущие дата и время жертвователя"""
  currentDateTime: DateTime!

  """Назначение пожертвования"""
  donationIntents: [DonationIntentInput!]!

  """Способ оплаты"""
  paymentIntent: PaymentIntentInput!
}

"""Параметры изменения информации об условиях списания комиссии подписки"""
input UpgradeSubscriptionCommissionInput {
  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Идентификатор подписки"""
  subscriptionId: DonationSubscriptionId!
}

"""Параметры запроса на отмену подписки"""
input CancelSubscriptionInput {
  """Идентификатор подписки, которую требуется отменить"""
  subscriptionId: DonationSubscriptionId!
}

"""Периоды подсчёта статистики"""
type Statistics {
  lastMonth: StatisticsPeriod!
  lastWeek: StatisticsPeriod!
  thisMonth: StatisticsPeriod!
  thisWeek: StatisticsPeriod!
  today: StatisticsPeriod!
  yesterday: StatisticsPeriod!
}

"""
Различные расчётные значения, предназначенные для визуализации статистики платформы
"""
type Amounts {
  """Сумма средств на счетах-депозитах жертвователей"""
  amountOfBenefactorDeposits: Int!

  """Сумма всех действующих подписок проекта"""
  amountOfProjectActiveSubscriptions: Int!

  """
  Сумма всех действующих подписок на проект, созданных до начала текущего месяца
  """
  amountOfProjectActiveSubscriptionsCreatedBeforeCurrentMonth: Int!

  """Сумма всех действующих подписок на проект, созданных в текущем месяце"""
  amountOfProjectActiveSubscriptionsCreatedInCurrentMonth: Int!

  """Сумма всех переводов на счёт проекта, не являющихся подписками"""
  amountOfProjectNonSubscriptionDonations: Int!

  """
  Сумма всех переводов на счёт проекта, не являющихся подписками, собранных в текущем месяце
  """
  amountOfProjectNonSubscriptionDonationsCollectedInCurrentMonth: Int!

  """
  Возвращает количество средств от подписки на проект, собранных в текущем месяце
  """
  amountOfProjectSubscriptionDonationsCollectedInCurrentMonth: Int!

  """Сумма всех подписок на проект, отменённых в текущем месяце"""
  amountOfProjectSubscriptionsCancelledInCurrentMonth: Int!

  """
  Сумма всех действующих подписок на регулярные потребности всех подопечных
  """
  amountOfWardsActiveSubscriptions: Int!

  """
  Сумма всех действующих подписок на регулярные потребности всех подопечных, созданных до начала текущего месяца
  """
  amountOfWardsActiveSubscriptionsCreatedBeforeCurrentMonth: Int!

  """
  Сумма всех действующих подписок на регулярные потребности всех подопечных, созданных в текущем месяце
  """
  amountOfWardsActiveSubscriptionsCreatedInCurrentMonth: Int!

  """
  Сумма всех переводов, не являющихся подписками, на регулярные потребности всех подопечных
  """
  amountOfWardsNonSubscriptionDonations: Int!

  """
  Сумма всех переводов, не являющихся подписками, на регулярные потребности всех подопечных, собранных в текущем месяце
  """
  amountOfWardsNonSubscriptionDonationsCollectedInCurrentMonth: Int!

  """Сумма средств на счётах-кошельках подопечных"""
  amountOfWardsRegularNeedsAccounts: Int!

  """
  Сумма средств от подписки на регулярные потребности всех подопечных, собранных в текущем месяце
  """
  amountOfWardsSubscriptionDonationsCollectedInCurrentMonth: Int!

  """
  Сумма всех подписок на регулярные потребности всех подопечных, отменённых в текущем месяце
  """
  amountOfWardsSubscriptionsCancelledInCurrentMonth: Int!
}

"""
Данные для изменения счёта-депозита жертвователя, средства с которого могут расходоваться на любые цели
"""
input UpdateBenefactorDepositAccountForSpecificWardsInput {
  id: AccountId!

  """Заголовок счёта, для показа в списках"""
  title: String!
}

"""Параметры перевода средств на счёт"""
input TransferFundsToAccountInput {
  """Идентификатор счёта-получателя средств"""
  accountId: AccountId!

  """Максимальное количество средств, которое будет переведено"""
  maximumAmount: Int!

  """Идентификатор счёта-источника средств"""
  sourceAccountId: AccountId!
}

"""Результат выполнения операции перевода средств на счёт"""
type TransferFundsToAccountResult {
  """Счёт, с которого списывались средства"""
  sourceAccount: Account!

  """Счёт, на который начислялись средства"""
  targetAccount: Account!
}

"""Данные для удаления подопечного из списка подопечных счёта-депозита"""
input RemoveWardFromTheBenefactorDepositAccountForSpecificWardsInput {
  id: AccountId!

  """Идентификатор подопечного"""
  wardId: WardId!
}

"""Параметры размещения депозита жертвователя"""
input DepositToBenefactorAccountInput {
  """Идентификатор счёта-депозита жертвователя"""
  accountId: AccountId!

  """Размер депозита"""
  amount: Int!

  """Название контрагента"""
  counterpartyName: String!

  """Номер платёжного документа"""
  documentNumber: String!

  """Назначение платежа"""
  purpose: String!

  """Дата перевода"""
  transferDate: Date!
}

"""
Данные для создания счёта-депозита жертвователя, средства с которого могут расходоваться только на потребности указанных подопечных
"""
input CreateBenefactorDepositAccountForSpecificWardsInput {
  benefactorId: BenefactorId!

  """Заголовок счёта, для показа в списках"""
  title: String!
}

"""
Данные для создания счёта-депозита жертвователя, средства с которого могут расходоваться на потребности всех подопечных
"""
input CreateBenefactorDepositAccountForAllWardsInput {
  benefactorId: BenefactorId!
}

"""
Данные для создания счёта-депозита жертвователя, средства с которого могут расходоваться только на нужды проекта
"""
input CreateBenefactorDepositAccountForProjectNeedsInput {
  benefactorId: BenefactorId!
}

"""
Данные для создания счёта-депозита жертвователя, средства с которого могут расходоваться на любые цели
"""
input CreateBenefactorDepositAccountWithoutConditionsInput {
  benefactorId: BenefactorId!
}

"""Данные для добавления подопечных к списку подопечных счёта-депозита"""
input AddWardsToTheBenefactorDepositAccountForSpecificWardsInput {
  id: AccountId!

  """Список идентификаторов подопечных для добавления"""
  wardIds: [WardId!]!
}

"""Категория навыков"""
type SkillCategory {
  id: SkillCategoryId!

  """Навыки данной категории"""
  skills: [Skill!]!

  """Название категории"""
  title: String!
}

"""Параметры изменения информации фонда-партнёра"""
input UpdateFoundationInput {
  address: String!
  description: String!

  """Идентификатор фонда-партнёра"""
  id: FoundationId!
  logoId: String
  name: String!
}

"""Параметры добавления фонда-партнёра"""
input AddFoundationInput {
  address: String!
  description: String!
  logoId: String
  name: String!
}

"""Аккумулированные счётчики событий фондов-партнёров"""
type FoundationEventsCounters {
  """Количество активных событий"""
  active: Int!

  """Количество отменённых событий"""
  cancelled: Int!

  """Количество завершённых событий"""
  closed: Int!

  """Общее количество событий"""
  total: Int!
}

"""Статус широковещательного уведомления"""
enum BroadcastNotificationStatus {
  """Уведомление создано"""
  CREATED

  """Происходит создание уведомлений для конкретных получателей"""
  POPULATING

  """Уведомления для конкретных получателей созданы"""
  POPULATED

  """Возникла ошибка при отправке"""
  ERROR
}

"""Параметры редактирования отчёта о событии фонда-партнёра"""
input UpdateFoundationEventReportInput {
  """Идентификатор события"""
  id: FoundationEventId!

  """Изображения, прикреплённые к отчёту"""
  images: [DocumentInput!]!

  """Текст отчёта"""
  text: String!
}

"""Параметры изменения данных события фонда-партнёра"""
input UpdateFoundationEventInput {
  address: String!
  agreementFileId: String
  agreementUrl: String
  city: String!
  description: String!

  """Идентификатор события"""
  id: FoundationEventId!
  images: [String!]!
  meetingInstructions: String!
  passportRequired: Boolean!
  phoneNumber: String!
  requirements: [FoundationEventParticipationRequirementInput!]!
  start: DateTime!
  title: String!
}

input UpdateFoundationEventAttendanceRatingInput {
  """Идентификатор участия"""
  attendanceId: FoundationEventAttendanceId!

  """Комментарий"""
  comment: String

  """Оценка по пятибалльной шкале"""
  rating: Int!
}

"""Параметры отбора заявки на участие в событии фонда-партнёра"""
input SelectFoundationEventApplicationInput {
  applicationId: FoundationEventApplicationId!

  """Выбрать как основного участника"""
  primary: Boolean!
}

input RevokeFoundationEventApplicationInput {
  """Идентификатор заявки"""
  applicationId: FoundationEventApplicationId!
}

"""Параметры отклонения заявки на участие в событии фонда-партнёра"""
input DeclineFoundationEventApplicationInput {
  applicationId: FoundationEventApplicationId!
}

input CheckinToFoundationEventInput {
  """Регистрационный код"""
  code: Int!

  """Идентификатор события"""
  id: FoundationEventId!
}

"""Параметры подачи заявки на участие в событии фонда-партнёра"""
input ApplyToFoundationEventInput {
  """Идентификатор события"""
  id: FoundationEventId!

  """Список навыков, которые текущий жертвователь готов предложить"""
  skillIds: [SkillId!]!
}

"""Параметры добавления события фонда-партнёра"""
input AddFoundationEventInput {
  address: String!
  agreementFileId: String
  agreementUrl: String
  city: String!
  description: String!

  """Идентификатор фонда-партнёра"""
  foundationId: FoundationId!
  images: [String!]!
  meetingInstructions: String!
  passportRequired: Boolean!
  phoneNumber: String!
  requirements: [FoundationEventParticipationRequirementInput!]!
  start: DateTime!
  title: String!
}

"""Информация о предлагаемых навыках помощника"""
type BenefactorSkillsInformation {
  """Описание опыта"""
  experience: String

  """Ссылка на портфолио"""
  portfolio: String

  """Навыки"""
  skills: [Skill!]!
}

"""Информация о волонтёрском опыте и навыках"""
type BenefactorVolunteerInformation {
  """Документы, имеющие отношение к волонтёрству"""
  documents: [Document!]!

  """Описание волонтёрского опыта"""
  experience: String
}

"""Персональные данные жертвователя"""
type BenefactorPersonalData {
  """Рассказ жертвователя о себе"""
  about: String

  """Дата рождения"""
  birthday: Date!

  """Имя"""
  name: Nomen!

  """Учётная запись VK"""
  vkUsername: String
}

"""Параметры изменения информации о волонтёрском опыте жертвователя"""
input UpdateBenefactorVolunteerInformationInput {
  """Документы, имеющие отношение к волонтёрству"""
  documents: [DocumentInput!]!

  """Волонтёрский опыт"""
  experience: String
}

"""Параметры изменения информации о волонтёрском опыте жертвователя"""
input UpdateBenefactorVolunteerInformationByAdministratorInput {
  benefactorId: BenefactorId!

  """Документы, имеющие отношение к волонтёрству"""
  documents: [DocumentInput!]!

  """Волонтёрский опыт"""
  experience: String
}

"""Параметры изменения информации о навыках жертвователя"""
input UpdateBenefactorSkillsInformationInput {
  """Описание опыта"""
  experience: String

  """Ссылка на портфолио"""
  portfolio: String

  """Навыки"""
  skills: [SkillId!]!
}

"""Параметры изменения списка навыков жертвователя"""
input UpdateBenefactorSkillsInformationByAdministratorInput {
  benefactorId: BenefactorId!

  """Описание опыта"""
  experience: String

  """Ссылка на портфолио"""
  portfolio: String

  """Навыки"""
  skills: [SkillId!]!
}

"""Параметры изменения персональных данных жертвователя"""
input UpdateBenefactorPersonalDataInput {
  """Информация о себе"""
  about: String

  """Дата рождения"""
  birthday: Date!

  """Имя"""
  firstName: String!

  """Фамилия"""
  lastName: String!

  """Отчество"""
  middleName: String

  """Идентификатор пользователя в VK"""
  vkUsername: String
}

"""Параметры изменения персональных данных жертвователя"""
input UpdateBenefactorPersonalDataByAdministratorInput {
  """Информация о себе"""
  about: String
  benefactorId: BenefactorId!

  """Дата рождения"""
  birthday: Date!

  """Имя"""
  firstName: String!

  """Фамилия"""
  lastName: String!

  """Отчество"""
  middleName: String

  """Идентификатор пользователя в VK"""
  vkUsername: String
}

"""
Параметры обновления информации о городах, представляющих интерес для жертвователя
"""
input UpdateBenefactorCitiesOfInterestInput {
  """Список городов"""
  cities: [String!]!
}

"""Информация о текущем пользователе"""
type Me {
  """Информация о текущем жертвователе"""
  benefactor: Benefactor

  """Непросмотренные истории указанного блока историй."""
  blockStories(
    """Метка блока историй."""
    blockLabel: StoryBlockLabel!
  ): [Story!]!

  """Права текущего пользователя"""
  permissions: Permissions!

  """Информация о текущем пользователе"""
  user: User!
}

"""Параметры для отбора администраторов"""
input AdministratorsFilterInput {
  """Учётная запись заблокирована"""
  disabled: Boolean

  """Имя"""
  displayName: String

  """Адрес электронной почты"""
  email: String

  """Адрес электронной почты подтверждён"""
  emailConfirmed: Boolean

  """Тип административных пользователей для поиска"""
  kind: AdministratorsKind
}

"""Параметры изменения данных учётной записи представителя фонда"""
input UpdateFoundationRepresentativeInput {
  displayName: String!
  id: ID!
}

"""Параметры изменения данных учётной записи модератора"""
input UpdateModeratorInput {
  displayName: String!
  id: ID!
}

"""Параметры изменения данных учётной записи системного администратора"""
input UpdateSystemAdministratorInput {
  displayName: String!
  id: ID!
}

"""Параметры изменения пароля учётной записи"""
input ResetPasswordInput {
  """Код подтверждения операции"""
  code: String!

  """Подтверждение нового пароля"""
  confirmPassword: String!

  """Адрес электронной почты пользователя"""
  email: String!

  """Новый пароль"""
  password: String!
}

"""Параметры получения кода для входа по номеру телефона"""
input PhoneLoginCodeInput {
  """Номер телефона"""
  phone: String!
}

"""Параметры запроса на сброс пароля"""
input ForgotPasswordInput {
  """Адрес электронной почты пользователя"""
  email: String!
}

"""Параметры блокировки или отмены блокировки учётной записи пользователя"""
input EnableOrDisableUserInput {
  """Признак блокировки учётной записи"""
  disabled: Boolean!

  """Идентификатор пользователя"""
  id: ID!
}

"""Параметры удаления учётной записи пользователя"""
input DeleteUserInput {
  """Идентификатор пользователя"""
  id: ID!
}

"""Параметры создания учётной записи представителя фонда"""
input CreateFoundationRepresentativeInput {
  displayName: String!
  email: String!

  """Идентификатор фонда"""
  foundationId: FoundationId!
}

"""Параметры создания учётной записи модератора"""
input CreateModeratorInput {
  displayName: String!
  email: String!
}

"""Параметры создания учётной записи системного администратора"""
input CreateSystemAdministratorInput {
  displayName: String!
  email: String!
}

"""Параметры подтверждения адреса электронной почты пользователя"""
input ConfirmEmailInput {
  """Код подтверждения"""
  code: String!

  """Идентификатор пользователя"""
  id: ID!
}

"""Параметры изменения пароля пользователя"""
input ChangeUserPasswordInput {
  """Идентификатор пользователя"""
  id: ID!

  """Новый пароль пользователя"""
  newPassword: String!
}

"""Параметры изменения номера телефона пользователя"""
input ChangePhoneNumberInput {
  """Код подтверждения"""
  code: String!

  """Новый номер телефона"""
  newPhoneNumber: String!
}

"""Параметры инициирования смены номера телефона"""
input ChangePhoneNumberCodeInput {
  """Новый номер телефона"""
  newPhoneNumber: String!
}

"""Параметры изменения номера телефона жертвователя"""
input ChangePhoneNumberByAdministratorInput {
  """Номер телефона"""
  phoneNumber: String!

  """Идентификатор пользователя"""
  userId: ID!
}

"""Параметры ручного запуска отчёта"""
input RunReportInput {
  """Идентификатор отчёта"""
  reportId: String!
}

"""Клиентские приложения"""
enum ClientApplication {
  """Мобильное приложение Android"""
  ANDROID

  """Мобильное приложение iOS"""
  IOS
}

"""Параметры добавления информации о новой версии клиентского приложения"""
input AddClientVersionInput {
  """Идентификатор приложения"""
  client: ClientApplication!

  """MAJOR-часть версии"""
  major: Int!

  """Признак обязательности обновления"""
  mandatory: Boolean!

  """MINOR-часть версии"""
  minor: Int!

  """PATCH-часть версии"""
  patch: Int!
}

scalar StoryBlockId

"""Частная информация о подопечном"""
type WardPrivateInformation {
  """Адрес"""
  address: Address!

  """Частные заметки о подопечном"""
  comments: String

  """Группа инвалидности"""
  disabilityGroup: Int

  """Файлы-документы подопечного"""
  documents: [Document!]!

  """Подъезд"""
  entranceNumber: String

  """Этаж"""
  flatFloor: String

  """Семейный статус"""
  maritalStatus: MaritalStatus

  """Паспортные данные"""
  passport: Passport!

  """Номер телефона"""
  phoneNumber: String

  """Профессия"""
  profession: String

  """Звание или учёная степень"""
  rank: String
}

"""Параметры изменения списка документов подопечного"""
input UpdateWardDocumentsInput {
  """Документы"""
  documents: [DocumentInput!]!

  """Идентификатор подопечного"""
  id: WardId!
}

"""Причина деактивации подопечного"""
enum WardDeactivationReason {
  """Смерть"""
  DEATH

  """Отключение"""
  DISCONTINUATION

  """Отказ от получения помощи"""
  REFUSAL
}

"""Параметры обновления списка документов периода регулярной потребности"""
input UpdateRegularNeedPeriodDocumentsInput {
  """Документы"""
  documents: [DocumentInput!]!

  """Идентификатор периода регулярной потребности"""
  periodId: RegularNeedPeriodId!
}

"""Параметры изменения разовой потребности"""
input UpdateOneTimeNeedInput {
  """Описание потребности"""
  description: String!

  """Номер иконки в списке иконок"""
  icon: Int!
  needId: NeedId!

  """Заголовок потребности"""
  title: String!

  """Ссылка на страницу с информацией о продукте/услуге"""
  url: String
}

"""Параметры обновления списка документов разовой потребности"""
input UpdateOneTimeNeedDocumentsInput {
  """Документы"""
  documents: [DocumentInput!]!
  needId: NeedId!
}

"""Параметры добавления разовой потребности"""
input AddOneTimeNeedInput {
  """Описание потребности"""
  description: String!

  """Номер иконки в списке иконок"""
  icon: Int!

  """Требуемое количество средств"""
  requiredAmount: Int!

  """Дата, к которой требуется собрать средства"""
  targetDate: Date!

  """Заголовок потребности"""
  title: String!

  """Ссылка на страницу с информацией о продукте/услуге"""
  url: String
  wardId: WardId!
}

"""
Параметры создания потребности "Продуктовая корзина"
"""
input AddGrocerySetNeedInput {
  wardId: WardId!
}

"""Параметры изменения данных подопечного"""
input UpdateWardInput {
  address: String!
  categories: [CategoryId!]!
  city: String!
  comments: String
  dateOfBirth: Date!
  disabilityGroup: Int
  entranceNumber: String
  firstName: String!
  flatFloor: String
  gender: Gender!

  """Идентификатор подопечного"""
  id: WardId!
  lastName: String!
  maritalStatus: MaritalStatus
  middleName: String
  passportIssueDate: Date
  passportIssuer: String
  passportIssuerCode: String
  passportNumber: String
  passportSeries: String
  phoneNumber: String!
  photoId: String!
  placeOfBirth: String
  profession: String
  publicCoordinates: String!
  rank: String
  story: String!
}

"""Параметры добавления подопечного"""
input AddWardInput {
  address: String!
  categories: [CategoryId!]!
  city: String!
  comments: String
  dateOfBirth: Date!
  disabilityGroup: Int
  entranceNumber: String
  firstName: String!
  flatFloor: String
  gender: Gender!
  lastName: String!
  maritalStatus: MaritalStatus
  middleName: String
  passportIssueDate: Date
  passportIssuer: String
  passportIssuerCode: String
  passportNumber: String
  passportSeries: String
  phoneNumber: String!
  photoId: String!
  placeOfBirth: String
  profession: String
  publicCoordinates: String!
  rank: String
  story: String!
}

scalar StoryBlockLabel

"""Параметры обновления экранов истории"""
input UpdateStoryScreensInput {
  """Идентификатор истории"""
  id: StoryId!

  """Экраны истории"""
  screens: [StoryScreenInput!]!
}

"""Параметры обновления истории."""
input UpdateStoryInput {
  """Идентификатор истории."""
  id: StoryId!

  """Изображение для ленты историй"""
  imageId: String

  """Заголовок истории."""
  title: String!
}

"""Параметры изменения данных блока историй."""
input UpdateStoryBlockInput {
  """Идентификатор блока историй."""
  id: StoryBlockId!

  """Заголовок блока историй."""
  title: String!
}

"""Параметры отмены публикации истории."""
input UnpublishStoryInput {
  """Идентификатор истории."""
  id: StoryId!
}

"""Параметры публикации истории."""
input PublishStoryInput {
  """Идентификатор истории."""
  id: StoryId!
}

"""Параметры удаления истории."""
input DeleteStoryInput {
  """Идентификатор истории."""
  id: StoryId!
}

"""Параметры удаления блока историй."""
input DeleteStoryBlockInput {
  """Идентификатор блока историй."""
  id: StoryBlockId!
}

"""Параметры изменения порядка следования историй в блоке."""
input ChangeStoriesOrderInput {
  blockId: StoryBlockId!
  storiesIds: [StoryId!]!
}

"""Параметры добавления списка просмотренных историй."""
input AddViewedStoriesInput {
  """Идентификаторы просмотренных историй."""
  viewedStories: [StoryId!]!
}

"""Параметры добавления новой истории к блоку историй."""
input AddStoryInput {
  """Идентификатор блока историй."""
  storyBlockId: StoryBlockId!

  """Заголовок истории."""
  title: String!
}

"""Экран истории."""
type StoryScreen {
  """Заголовок кнопки."""
  buttonTitle: String

  """Адрес для перехода при нажатии на кнопку."""
  buttonUrl: String

  """Фоновое изображение экрана."""
  image: FileInformation

  """Основной текст."""
  text: String

  """Тема экрана."""
  theme: StoryScreenTheme!

  """Заголовок."""
  title: String
}

"""Параметры добавления блока историй."""
input AddStoryBlockInput {
  """Метка блока историй."""
  label: StoryBlockLabel!

  """Заголовок блока историй."""
  title: String
}

"""Блок историй."""
type StoryBlock {
  id: StoryBlockId!

  """Метка блока."""
  label: StoryBlockLabel!

  """Истории блока."""
  stories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Включать неопубликованные истории."""
    includeNotPublished: Boolean! = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): StoriesConnection

  """Заголовок блока."""
  title: String!
}

"""Информация о проекте"""
type Project {
  """Пожертвования, сделанные текущим жертвователем"""
  benefactorDonations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BenefactorDonationsConnection

  """Общая сумма пожертвований, сделанных текущим жертвователем"""
  benefactorDonationsAmount: Int

  """Расходы проекта"""
  expenses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [ProjectExpenseSortInput!]
  ): ProjectExpensesConnection

  """Основной счёт проекта"""
  mainAccount: Account!

  """Подписки на развитие проекта"""
  subscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Возвращать все подписки, включая отменённые."""
    includeCancelled: Boolean = false

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectSubscriptionsConnection

  """Список помогающих проекту"""
  supporters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SupportersConnection

  """Счёт резерва подопечных"""
  wardsReserveAccount: Account!
}

"""Параметры изменения документов расхода проекта"""
input UpdateProjectExpenseDocumentsInput {
  """Документы"""
  documents: [DocumentInput!]!

  """Идентификатор расхода"""
  id: ProjectExpenseId!
}

"""Параметры для создания счёта с расходами проекта за период"""
input AddProjectExpenseInput {
  """Дата отчётного периода, используются только месяц и год"""
  referenceDate: Date!

  """Требуемая (потраченная) сумма"""
  requiredAmount: Int!

  """Краткое описание расходов"""
  title: String!
}

"""Параметры регистрации токена мобильного устройства"""
input RegisterDeviceTokenInput {
  """Токен мобильного устройства"""
  token: String!
}

"""Параметры добавления широковещательного уведомления"""
input AddBroadcastNotificationInput {
  """Текст кнопки"""
  buttonText: String

  """Адрес перехода при нажатии на кнопку"""
  buttonUrl: String

  """Файл со списком получателей уведомления"""
  fileWithListOfRecipients: String

  """Список идентификаторов изображений, прикреплённых к уведомлению"""
  images: [String!]

  """Получатели уведомления"""
  recipients: BroadcastNotificationRecipients

  """Текст уведомления"""
  text: String!

  """Заголовок уведомления"""
  title: String!
}

"""Информация о деактивации подопечного"""
type WardDeactivationInformation {
  """Дата деактивации"""
  date: DateTime!

  """Причина деактивации"""
  reason: WardDeactivationReason!
}

"""Параметры загрузки промо-кодов в достижение с промо-кодами"""
input UploadPromoCodesInput {
  """Идентификатор достижения"""
  achievementId: AchievementId!

  """Идентификатор файла с промо-кодами"""
  fileId: String!
}

type IncompatibleAchievementTypeError implements Error {
  message: String!
}

input UpdateBenefactorStatusInput {
  """Описание статуса"""
  description: String!

  """Идентификатор статуса"""
  id: BenefactorStatusId!

  """Идентификатор изображения статуса в ленте"""
  imageId: String!

  """Идентификатор истории, содержащей описание статуса"""
  storyId: StoryId!

  """Название статуса"""
  title: String!
}

"""Данные для изменения достижения с промо-кодами в качестве призов"""
input UpdateAchievementWithPromoCodesInput {
  description: String!
  id: AchievementId!
  imageId: String!
  isHighlighted: Boolean!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int

  """Ссылка для применения промо-кода"""
  url: String
}

"""
Данные для изменения данных достижения с неограниченным количеством наград
"""
input UpdateAchievementWithUnlimitedNumberOfPrizesInput {
  description: String!
  id: AchievementId!
  imageId: String!
  isHighlighted: Boolean!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int
}

"""Данные для изменения достижения с физическими призами"""
input UpdateAchievementWithMaterialPrizesInput {
  description: String!
  id: AchievementId!
  imageId: String!
  isHighlighted: Boolean!

  """Количество выданных призов"""
  numberOfGrantedPrizes: Int!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int

  """Общее количество призов"""
  totalNumberOfPrizes: Int!
}

input AddBenefactorStatusInput {
  """Количество сердец, по достижению которого выдаётся статус"""
  coins: Int!

  """Описание статуса"""
  description: String!

  """Идентификатор изображения статуса в ленте"""
  imageId: String!

  """Идентификатор истории, содержащей описание статуса"""
  storyId: StoryId!

  """Название статуса"""
  title: String!
}

"""Данные для создания достижения с промо-кодами в качестве призов"""
input AddAchievementWithPromoCodesInput {
  coins: Int!
  description: String!
  imageId: String!
  isHighlighted: Boolean!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int
}

"""Данные для создания достижения с физическими призами"""
input AddAchievementWithMaterialPrizesInput {
  coins: Int!
  description: String!
  imageId: String!
  isHighlighted: Boolean!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int

  """Общее количество призов"""
  totalNumberOfPrizes: Int!
}

"""Данные для создания достижения с неограниченным количеством наград"""
input AddAchievementWithUnlimitedNumberOfPrizesInput {
  coins: Int!
  description: String!
  imageId: String!
  isHighlighted: Boolean!
  storyId: StoryId!
  title: String!
  topImageId: String
  topPosition: Int
}

type CityByIpResult {
  city: String
  ipAddress: String
}

"""Настройки подсказок адресов"""
enum AddressSuggestionMode {
  """Возвращать подсказки для всех адресов, вплоть до домов/строений"""
  REGULAR

  """
  Возвращать подсказки только для городов, без отдельно стоящих населённых пунктов
  """
  ONLY_CITIES

  """Возвращать подсказки для городов и населённых пунктов"""
  CITIES_AND_SETTLEMENTS
}

"""Подсказка вводимого адреса"""
type AddressSuggestion {
  """Текст для отображения"""
  displayText: String!

  """Полный текст адреса"""
  fullAddress: String!

  """У адреса определился город"""
  hasCity: Boolean!

  """У адреса определился город/населённый пункт"""
  hasCityOrSettlement: Boolean!

  """Для адреса доступны координаты"""
  hasCoordinates: Boolean!

  """У адреса определился конкретный дом"""
  hasHouse: Boolean!

  """У адреса определился регион"""
  hasRegion: Boolean!

  """У адреса определился населённый пункт"""
  hasSettlement: Boolean!

  """Полное название региона"""
  region: String
}

"""Категория подопечного, спецпроекта и т.п."""
type Category {
  """Дата и время создания категории."""
  createdAt: DateTime!
  id: CategoryId!

  """Изображение"""
  image: FileInformation

  """Название"""
  name: String!

  """Порядок показа в списке"""
  order: Int!

  """Дата и время последнего обновления категории."""
  updatedAt: DateTime!
}

"""Параметры обновления категории"""
input UpdateCategoryInput {
  """Идентификатор категории"""
  id: CategoryId!

  """Изображение"""
  imageId: String

  """Название"""
  name: String!
}

"""Параметры добавления новой категории"""
input AddCategoryInput {
  """Изображение"""
  imageId: String

  """Название"""
  name: String!
}

"""Ошибка, сообщающая, что категория уже существует"""
type CategoryAlreadyExistsError implements Error {
  message: String!
}

"""Параметры запроса на подготовку файлов к загрузке в хранилище"""
input PrepareFilesUploadInput {
  """Информация о загружаемых файлах"""
  files: [FileUploadRequestInput!]!
}

"""Данные для загрузки файла в хранилище"""
type FileUploadInformation implements File {
  """Имя файла (как в запросе)"""
  fileName: String!

  """Идентификатор файла"""
  id: String!

  """
  Адрес, на который необходимо загрузить содержимое файла (должен использоваться HTTP-метод PUT)
  """
  uploadUrl: String!

  """Ссылка для отображения или скачивания файла"""
  url(
    """Сформировать ссылку на скачивание файла"""
    asAttachment: Boolean! = false

    """Вариант изображения"""
    variant: String
  ): String!
}

"""
Запрос на предоставление информации для загрузки файла в хранилище файлов
"""
input FileUploadRequestInput {
  """Тип содержимого загружаемого файла"""
  contentType: String!

  """Имя загружаемого файла"""
  fileName: String!
}

"""Тема экрана истории."""
enum StoryScreenTheme {
  """Светлая тема."""
  LIGHT

  """Тёмная тема."""
  DARK
}

"""Параметры обновления экрана истории."""
input StoryScreenInput {
  """Заголовок кнопки."""
  buttonTitle: String

  """Адрес для перехода при нажатии на кнопку."""
  buttonUrl: String

  """Идентификатор изображения."""
  imageId: String

  """Основной текст."""
  text: String

  """Тема экрана."""
  theme: StoryScreenTheme!

  """Заголовок."""
  title: String
}

"""Семейный статус"""
enum MaritalStatus {
  """Холост/не замужем"""
  SINGLE

  """Женат/замужем"""
  MARRIED

  """Живёт отдельно от супруга"""
  SEPARATED

  """Разведён/разведена"""
  DIVORCED

  """Вдовец/вдова"""
  WIDOWED
}

"""Данные паспорта РФ"""
type Passport {
  """Дата выдачи"""
  dateOfIssue: Date

  """Кем выдан паспорт"""
  issuer: String

  """Код подразделения, выдавшего паспорт"""
  issuerCode: String

  """Номер"""
  number: String

  """Место рождения"""
  placeOfBirth: String

  """Серия"""
  series: String
}

"""Тип администраторов для фильтрации"""
enum AdministratorsKind {
  """Системные администраторы"""
  SYSTEM_ADMINISTRATORS

  """Модераторы"""
  MODERATORS

  """Представители фондов"""
  FOUNDATION_REPRESENTATIVES
}

"""Требования к участнику события"""
input FoundationEventParticipationRequirementInput {
  """Автоматически выбирать заявки данного навыка для участия в событии"""
  autoSelect: Boolean!

  """Комментарий для участника"""
  description: String

  """Требуемое количество участников (0 - без ограничений)"""
  quantity: Int!

  """Идентификатор навыка"""
  skillId: SkillId!
}

scalar SkillCategoryId

"""Статистика за указанный период"""
type StatisticsPeriod {
  """Количество успешных платёжных транзакций"""
  completedTransactionsCount: Long!

  """Количество отклонённых платёжных транзакций"""
  declinedTransactionsCount: Long!

  """Окончание интервала статистики (не включительно)"""
  end: Date!

  """Начало интервала статистики (включительно)"""
  start: Date!

  """Общее количество полученных средств"""
  transactionsAmount: Int!
}

input PaymentIntentInput {
  """Намерение совершить оплату банковским переводом"""
  bankTransfer: BankTransferPaymentIntentInput

  """Намерение оплатить заказ новой картой"""
  cloudPaymentsNewCard: CloudPaymentsNewCardPaymentIntentInput

  """Намерение оплатить заказ сохранённой картой"""
  cloudPaymentsSavedCard: CloudPaymentsSavedCardPaymentIntentInput

  """Намерение оплатить заказ через СБП"""
  cloudPaymentsSbp: CloudPaymentsSbpPaymentIntentInput

  """Намерение совершить оплату ваучером"""
  voucher: VoucherPaymentIntentInput
}

"""Ответ на требование пройти верификацию платежа"""
input PaymentChallengeResponseInput {
  """Ответ на требование пройти 3DS-верификацию"""
  cloudPayments3dSecureChallengeResponse: CloudPayments3DSecurePaymentChallengeResponseInput
}

"""Информация о предлагаемом уровне комиссии"""
type CommissionPercentageSuggestion {
  """Размер комиссии"""
  commissionPercentage: Int!

  """Описание"""
  description: String!

  """Заголовок"""
  title: String!
}

"""Намерение пополнить счёт-депозит жертвователя"""
input BenefactorDepositAccountDonationIntentInput {
  """Идентификатор счёта-депозита жертвователя"""
  accountId: AccountId!

  """Размер депозита"""
  amount: Int!

  """Дата перевода"""
  transferDate: Date!
}

"""Намерение подписаться на развитие проекта"""
input ProjectSubscriptionIntentInput {
  """Размер подписки"""
  amount: Int!
}

"""Намерение подписаться на регулярные потребности указанных подопечных"""
input WardsSubscriptionIntentInput {
  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Список подопечных и размеров подписки"""
  wardsSubscriptionsAmounts: [WardSubscriptionAmountInput!]!
}

"""Намерение совершить пожертвование на спецпроект"""
input SpecialProjectDonationIntentInput {
  """Размер пожертвования"""
  amount: Int!

  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Идентификатор спецпроекта"""
  specialProjectId: SpecialProjectId!
}

"""Намерение совершить пожертвование на развитие проекта"""
input ProjectDonationIntentInput {
  """Размер пожертвования"""
  amount: Int!
}

"""Намерение совершить пожертвование в резерв подопечных"""
input WardsReserveDonationIntentInput {
  """Размер пожертвования"""
  amount: Int!

  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!
}

"""
Намерение совершить пожертвование на регулярные потребности подопечного
"""
input WardRegularNeedsDonationIntentInput {
  """Размер пожертвования"""
  amount: Int!

  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Идентификатор подопечного"""
  wardId: WardId!
}

"""Намерение совершить пожертвование на разовую потребность подопечного"""
input WardOneTimeNeedDonationIntentInput {
  """Размер пожертвования"""
  amount: Int!

  """Процент комиссии"""
  commissionPercentage: Int!

  """Готов ли жертвователь компенсировать комиссию?"""
  isCommissionCoveredByBenefactor: Boolean!

  """Идентификатор потребности"""
  needId: NeedId!
}

"""Параметры добавления или изменения документы"""
input DocumentInput {
  """Идентификатор файла"""
  id: String!

  """Заголовок или название файла"""
  title: String
}

"""Параметры подписки на подопечного"""
input WardSubscriptionAmountInput {
  """Размер пожертвования или подписки."""
  amount: Int!

  """Идентификатор подопечного."""
  wardId: WardId!
}

"""
Ответ на запрос дополнительной проверки подлинности держателя карты Visa или MasterCard
"""
input CloudPayments3DSecurePaymentChallengeResponseInput {
  """Код ответа"""
  paRes: String!
}

"""Параметры намерения оплатить заказ ваучером"""
input VoucherPaymentIntentInput {
  """Идентификатор ваучера"""
  voucherId: VoucherId!
}

"""Намерение совершить оплату банковским переводом"""
input BankTransferPaymentIntentInput {
  """Название контрагента"""
  counterpartyName: String!

  """Номер платёжного документа"""
  documentNumber: String!

  """Назначение платежа"""
  purpose: String!

  """Дата перевода"""
  transferDate: Date!
}

"""Намерение оплатить заказ через СПБ"""
input CloudPaymentsSbpPaymentIntentInput {
  """Любое значение, игнорируется"""
  anyValue: Boolean!
}

"""Намерение оплатить заказ сохранённой картой"""
input CloudPaymentsSavedCardPaymentIntentInput {
  """Идентификатор сохранённой карты"""
  savedCardId: CloudPaymentsSavedCardId!

  """Сделать картой по-умолчанию?"""
  setAsDefaultCard: Boolean!
}

"""Намерение оплатить заказ новой картой через систему CloudPayments"""
input CloudPaymentsNewCardPaymentIntentInput {
  """Имя держателя карты, латиницей"""
  cardholderName: String!

  """Криптограмма, созданная API CloudPayments"""
  cryptogram: String!

  """Сохранить карту для будущих платежей?"""
  saveCard: Boolean!

  """Сделать картой по-умолчанию?"""
  setAsDefaultCard: Boolean!
}

type PrepareFilesUploadPayload {
  files: [FileUploadInformation!]
}

union AddCategoryError = CategoryAlreadyExistsError

type AddCategoryPayload {
  category: Category
  errors: [AddCategoryError!]
}

input DeleteCategoryInput {
  """Идентификатор категории"""
  id: CategoryId!
}

type DeleteCategoryPayload {
  success: Boolean
}

input UpdateCategoriesOrderInput {
  """Идентификаторы категорий в требуемом порядке"""
  ids: [CategoryId!]!
}

type UpdateCategoriesOrderPayload {
  success: Boolean
}

union UpdateCategoryError = CategoryAlreadyExistsError

type UpdateCategoryPayload {
  category: Category
  errors: [UpdateCategoryError!]
}

type AddAchievementWithUnlimitedNumberOfPrizesPayload {
  achievement: Achievement
}

type AddAchievementWithMaterialPrizesPayload {
  achievement: Achievement
}

type AddAchievementWithPromoCodesPayload {
  achievement: Achievement
}

type AddBenefactorStatusPayload {
  status: BenefactorStatus
}

input DeleteAchievementInput {
  """Идентификатор достижения"""
  id: AchievementId!
}

type DeleteAchievementPayload {
  success: Boolean
}

input DeleteBenefactorStatusInput {
  """Идентификатор статуса жертвователя"""
  id: BenefactorStatusId!
}

type DeleteBenefactorStatusPayload {
  success: Boolean
}

input MarkBenefactorAchievementAsShownInput {
  """Идентификатор достижения жертвователя"""
  benefactorAchievementId: BenefactorAchievementId!
}

type MarkBenefactorAchievementAsShownPayload {
  success: Boolean
}

input PublishAchievementInput {
  """Идентификатор достижения"""
  id: AchievementId!
}

type PublishAchievementPayload {
  achievement: Achievement
}

input UnpublishAchievementInput {
  """Идентификатор достижения"""
  id: AchievementId!
}

type UnpublishAchievementPayload {
  achievement: Achievement
}

type UpdateAchievementWithMaterialPrizesPayload {
  achievement: Achievement
}

type UpdateAchievementWithUnlimitedNumberOfPrizesPayload {
  achievement: Achievement
}

type UpdateAchievementWithPromoCodesPayload {
  achievement: Achievement
}

type UpdateBenefactorStatusPayload {
  status: BenefactorStatus
}

input UpdateCoinsAccountedByClientInput {
  """Количество монет, о которых сообщалось пользователю"""
  coins: Int!
}

type UpdateCoinsAccountedByClientPayload {
  success: Boolean
}

union UploadPromoCodesError = IncompatibleAchievementTypeError

type UploadPromoCodesPayload {
  achievement: Achievement
  errors: [UploadPromoCodesError!]
}

type AddBroadcastNotificationPayload {
  broadcastNotification: BroadcastNotification
}

type RegisterDeviceTokenPayload {
  success: Boolean
}

type UnregisterDeviceTokenPayload {
  success: Boolean
}

type MarkAllNotificationsAsReadPayload {
  success: Boolean
}

type AddProjectExpensePayload {
  projectExpense: ProjectExpense
}

input SendProjectExpenseReportInput {
  """Идентификатор расхода"""
  id: ProjectExpenseId!
}

type SendProjectExpenseReportPayload {
  success: Boolean
}

type UpdateProjectExpenseDocumentsPayload {
  projectExpense: ProjectExpense
}

union AddStoryBlockError = StoryBlockWithSpecifiedLabelAlreadyExistsError

type AddStoryBlockPayload {
  errors: [AddStoryBlockError!]
  storyBlock: StoryBlock
}

type AddStoryPayload {
  story: Story
}

type AddViewedStoriesPayload {
  success: Boolean
}

type ChangeStoriesOrderPayload {
  success: Boolean
}

union DeleteStoryBlockError = StoryBlockWithStoriesCanNotBeDeletedError

type DeleteStoryBlockPayload {
  errors: [DeleteStoryBlockError!]
  success: Boolean
}

type DeleteStoryPayload {
  success: Boolean
}

union PublishStoryError = StoryWithoutScreensCanNotBePublishedError

type PublishStoryPayload {
  errors: [PublishStoryError!]
  story: Story
}

type UnpublishStoryPayload {
  story: Story
}

type UpdateStoryBlockPayload {
  storyBlock: StoryBlock
}

type UpdateStoryPayload {
  story: Story
}

type UpdateStoryScreensPayload {
  story: Story
}

union AddWardError = CategoryNotFoundError | CityNotFoundError

type AddWardPayload {
  errors: [AddWardError!]
  ward: Ward
}

type UpdateWardPayload {
  ward: Ward
}

type AddGrocerySetNeedPayload {
  need: Need
}

type AddOneTimeNeedPayload {
  need: Need
}

input ArchiveNeedInput {
  """Идентификатор потребности"""
  needId: NeedId!
}

type ArchiveNeedPayload {
  need: Need
}

input SendOneTimeNeedReportInput {
  """Идентификатор потребности"""
  id: NeedId!
}

type SendOneTimeNeedReportPayload {
  success: Boolean
}

input SendRegularNeedPeriodReportInput {
  """Идентификатор периода"""
  id: RegularNeedPeriodId!
}

type SendRegularNeedPeriodReportPayload {
  success: Boolean
}

type UpdateOneTimeNeedDocumentsPayload {
  oneTimeNeed: OneTimeNeed
}

type UpdateOneTimeNeedPayload {
  need: Need
}

type UpdateRegularNeedPeriodDocumentsPayload {
  regularNeedPeriod: RegularNeedPeriod
}

input RestInPeaceInput {
  """Дата смерти"""
  dateOfDeath: Date!

  """Идентификатор подопечного"""
  wardId: WardId!
}

type RestInPeacePayload {
  ward: Ward
}

input DeactivateWardInput {
  """Причина деактивации"""
  reason: WardDeactivationReason!

  """Идентификатор подопечного"""
  wardId: WardId!
}

type DeactivateWardPayload {
  ward: Ward
}

type UpdateWardDocumentsPayload {
  ward: Ward
}

input PublishWardInput {
  id: WardId!
}

type PublishWardPayload {
  ward: Ward
}

input UnpublishWardInput {
  id: WardId!
}

type UnpublishWardPayload {
  ward: Ward
}

input MarkWardAsRequiringImmediateHelpInput {
  id: WardId!
}

type MarkWardAsRequiringImmediateHelpPayload {
  ward: Ward
}

input MarkWardAsNotRequiringImmediateHelpInput {
  id: WardId!
}

type MarkWardAsNotRequiringImmediateHelpPayload {
  ward: Ward
}

union AddClientVersionError = ClientVersionAlreadyExistsError

type AddClientVersionPayload {
  errors: [AddClientVersionError!]
  version: ClientVersion
}

type RunReportPayload {
  success: Boolean
}

union ChangePhoneNumberByAdministratorError = PhoneNumberAlreadyRegisteredError | UserPersistenceError

type ChangePhoneNumberByAdministratorPayload {
  errors: [ChangePhoneNumberByAdministratorError!]
  success: Boolean
}

union ChangePhoneNumberCodeError = ForbiddenForUserError | PhoneNumberAlreadyRegisteredError | UserCommunicationError

type ChangePhoneNumberCodePayload {
  errors: [ChangePhoneNumberCodeError!]
  resendAt: DateTime
}

union ChangePhoneNumberError = ForbiddenForUserError | PhoneNumberAlreadyRegisteredError | UserCommunicationError

type ChangePhoneNumberPayload {
  errors: [ChangePhoneNumberError!]
  success: Boolean
}

union ChangeUserPasswordError = ForbiddenForUserError | UserPersistenceError

type ChangeUserPasswordPayload {
  errors: [ChangeUserPasswordError!]
  success: Boolean
}

union ConfirmEmailError = UserNotFoundError | UserPersistenceError

type ConfirmEmailPayload {
  errors: [ConfirmEmailError!]
  success: Boolean
}

union CreateSystemAdministratorError = EmailAlreadyRegisteredError | UserPersistenceError | UserCommunicationError

type CreateSystemAdministratorPayload {
  errors: [CreateSystemAdministratorError!]
  user: User
}

union CreateModeratorError = EmailAlreadyRegisteredError | UserPersistenceError | UserCommunicationError

type CreateModeratorPayload {
  errors: [CreateModeratorError!]
  user: User
}

union CreateFoundationRepresentativeError = EmailAlreadyRegisteredError | UserPersistenceError | UserCommunicationError

type CreateFoundationRepresentativePayload {
  errors: [CreateFoundationRepresentativeError!]
  user: User
}

union DeleteUserError = ForbiddenForUserError | UserCanNotBeDeletedError | UserPersistenceError

type DeleteUserPayload {
  errors: [DeleteUserError!]
  success: Boolean
}

union EnableOrDisableUserError = ForbiddenForUserError | UserPersistenceError

type EnableOrDisableUserPayload {
  errors: [EnableOrDisableUserError!]
  user: User
}

union ForgotPasswordError = ForbiddenForUserError | UserCommunicationError

type ForgotPasswordPayload {
  errors: [ForgotPasswordError!]
  success: Boolean
}

union PhoneLoginCodeError = UserPersistenceError | ForbiddenForUserError | UserCommunicationError | RegistrationProhibitedError

type PhoneLoginCodePayload {
  errors: [PhoneLoginCodeError!]
  resendAt: DateTime
}

union ResetPasswordError = UserPersistenceError

type ResetPasswordPayload {
  errors: [ResetPasswordError!]
  success: Boolean
}

union UpdateSystemAdministratorError = UserPersistenceError

type UpdateSystemAdministratorPayload {
  errors: [UpdateSystemAdministratorError!]
  user: User
}

union UpdateModeratorError = UserPersistenceError

type UpdateModeratorPayload {
  errors: [UpdateModeratorError!]
  user: User
}

union UpdateFoundationRepresentativeError = UserPersistenceError

type UpdateFoundationRepresentativePayload {
  errors: [UpdateFoundationRepresentativeError!]
  user: User
}

type UpdateBenefactorCitiesOfInterestPayload {
  benefactor: Benefactor
}

type UpdateBenefactorPersonalDataByAdministratorPayload {
  benefactor: Benefactor
}

type UpdateBenefactorPersonalDataPayload {
  benefactor: Benefactor
}

type UpdateBenefactorSkillsInformationByAdministratorPayload {
  benefactor: Benefactor
}

type UpdateBenefactorSkillsInformationPayload {
  benefactor: Benefactor
}

type UpdateBenefactorVolunteerInformationByAdministratorPayload {
  benefactor: Benefactor
}

type UpdateBenefactorVolunteerInformationPayload {
  benefactor: Benefactor
}

type AddFoundationEventPayload {
  foundationEvent: FoundationEvent
}

union ApplyToFoundationEventError = BenefactorPersonalDataMissingError | FoundationEventRegistrationClosedError

type ApplyToFoundationEventPayload {
  application: FoundationEventApplication
  errors: [ApplyToFoundationEventError!]
}

input ApproveFoundationEventInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type ApproveFoundationEventPayload {
  foundationEvent: FoundationEvent
}

input CancelFoundationEventInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type CancelFoundationEventPayload {
  foundationEvent: FoundationEvent
}

union CheckinToFoundationEventError = InvalidFoundationEventAttendanceCodeError

type CheckinToFoundationEventPayload {
  attendance: FoundationEventAttendance
  errors: [CheckinToFoundationEventError!]
}

input CloseFoundationEventInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

union CloseFoundationEventError = FoundationEventReportDoesNotExistsError

type CloseFoundationEventPayload {
  errors: [CloseFoundationEventError!]
  foundationEvent: FoundationEvent
}

input CloseFoundationEventRegistrationInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type CloseFoundationEventRegistrationPayload {
  foundationEvent: FoundationEvent
}

input ConvertFoundationEventApplicationToAttendanceInput {
  """Идентификатор заявки на участие в событии"""
  applicationId: FoundationEventApplicationId!
}

type ConvertFoundationEventApplicationToAttendancePayload {
  attendance: FoundationEventAttendance
}

type DeclineFoundationEventApplicationPayload {
  application: FoundationEventApplication
}

input OpenFoundationEventRegistrationInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type OpenFoundationEventRegistrationPayload {
  foundationEvent: FoundationEvent
}

input RequestFoundationEventApprovalInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type RequestFoundationEventApprovalPayload {
  foundationEvent: FoundationEvent
}

type RevokeFoundationEventApplicationPayload {
  application: FoundationEventApplication
}

type SelectFoundationEventApplicationPayload {
  application: FoundationEventApplication
}

input TakeFoundationEventOwnershipInput {
  """Идентификатор события"""
  foundationEventId: FoundationEventId!
}

type TakeFoundationEventOwnershipPayload {
  foundationEvent: FoundationEvent
}

type UpdateFoundationEventAttendanceRatingPayload {
  attendance: FoundationEventAttendance
}

type UpdateFoundationEventPayload {
  foundationEvent: FoundationEvent
}

type UpdateFoundationEventReportPayload {
  foundationEvent: FoundationEvent
}

type AddFoundationPayload {
  foundation: Foundation
}

union UpdateFoundationError = FoundationPersistenceError

type UpdateFoundationPayload {
  errors: [UpdateFoundationError!]
  foundation: Foundation
}

type AddWardsToTheBenefactorDepositAccountForSpecificWardsPayload {
  benefactorDepositAccountForSpecificWards: BenefactorDepositAccountForSpecificWards
}

union CreateBenefactorDepositAccountWithoutConditionsError = DepositAccountAlreadyExistsError

type CreateBenefactorDepositAccountWithoutConditionsPayload {
  benefactor: Benefactor
  errors: [CreateBenefactorDepositAccountWithoutConditionsError!]
}

union CreateBenefactorDepositAccountForProjectNeedsError = DepositAccountAlreadyExistsError

type CreateBenefactorDepositAccountForProjectNeedsPayload {
  benefactor: Benefactor
  errors: [CreateBenefactorDepositAccountForProjectNeedsError!]
}

union CreateBenefactorDepositAccountForAllWardsError = DepositAccountAlreadyExistsError

type CreateBenefactorDepositAccountForAllWardsPayload {
  benefactor: Benefactor
  errors: [CreateBenefactorDepositAccountForAllWardsError!]
}

type CreateBenefactorDepositAccountForSpecificWardsPayload {
  benefactor: Benefactor
}

type DepositToBenefactorAccountPayload {
  order: Order
}

type RemoveWardFromTheBenefactorDepositAccountForSpecificWardsPayload {
  benefactorDepositAccountForSpecificWards: BenefactorDepositAccountForSpecificWards
}

union TransferFundsToAccountError = FundsTransferProhibitedError

type TransferFundsToAccountPayload {
  errors: [TransferFundsToAccountError!]
  result: TransferFundsToAccountResult
}

type UpdateBenefactorDepositAccountForSpecificWardsPayload {
  benefactorDepositAccountForSpecificWards: BenefactorDepositAccountForSpecificWards
}

input AllowSubscriptionTransferInput {
  subscriptionId: DonationSubscriptionId!
}

type AllowSubscriptionTransferPayload {
  success: Boolean
}

type CancelSubscriptionPayload {
  success: Boolean
}

input ForbidSubscriptionTransferInput {
  subscriptionId: DonationSubscriptionId!
}

type ForbidSubscriptionTransferPayload {
  success: Boolean
}

type UpgradeSubscriptionCommissionPayload {
  subscription: WardDonationSubscription
}

union PlaceOrderError = OrderPlacementError

type PlaceOrderPayload {
  errors: [PlaceOrderError!]
  order: Order
}

type RespondToPaymentChallengePayload {
  success: Boolean
}

input RemoveSavedCloudPaymentsCardInput {
  """Идентификатор сохранённой платёжной карты."""
  savedCardId: CloudPaymentsSavedCardId!
}

type RemoveSavedCloudPaymentsCardPayload {
  success: Boolean
}

input SetDefaultCloudPaymentsCardInput {
  """Идентификатор сохранённой платёжной карты."""
  savedCardId: CloudPaymentsSavedCardId!
}

type SetDefaultCloudPaymentsCardPayload {
  success: Boolean
}

input EnableSubscriptionTransferToWardInput {
  """Идентификатор подопечного"""
  wardId: WardId!
}

type EnableSubscriptionTransferToWardPayload {
  ward: Ward
}

input DisableSubscriptionTransferToWardInput {
  """Идентификатор подопечного"""
  wardId: WardId!
}

type DisableSubscriptionTransferToWardPayload {
  ward: Ward
}

type AnonymizeBenefactorPayload {
  success: Boolean
}

type ChangeBenefactorProfileVisibilityPayload {
  benefactor: Benefactor
}

union CreateBenefactorError = EmailAlreadyRegisteredError | PhoneNumberAlreadyRegisteredError | UserPersistenceError

type CreateBenefactorPayload {
  benefactor: Benefactor
  errors: [CreateBenefactorError!]
}

union UpdateBenefactorByAdministratorError = UserPersistenceError

type UpdateBenefactorByAdministratorPayload {
  benefactor: Benefactor
  errors: [UpdateBenefactorByAdministratorError!]
}

type UpdateBenefactorEmailByAdministratorPayload {
  benefactor: Benefactor
}

union UpdateBenefactorEmailError = UserPersistenceError

type UpdateBenefactorEmailPayload {
  benefactor: Benefactor
  errors: [UpdateBenefactorEmailError!]
}

type UpdateBenefactorPayload {
  benefactor: Benefactor
}

union AddCityError = CityAlreadyExistsError

type AddCityPayload {
  city: City
  errors: [AddCityError!]
}

union DeleteCityError = CityIsAssignedError

type DeleteCityPayload {
  errors: [DeleteCityError!]
  success: Boolean
}

union UpdateCityError = CityAlreadyExistsError

type UpdateCityPayload {
  city: City
  errors: [UpdateCityError!]
}

type CreateLimitedLiabilityCompanyReportPayload {
  report: LimitedLiabilityCompanyReport
}

type PublishLimitedLiabilityCompanyReportPayload {
  report: LimitedLiabilityCompanyReport
}

type UpdateLimitedLiabilityCompanyBalancePayload {
  company: LimitedLiabilityCompany
}

type UpdateLimitedLiabilityCompanyReportDocumentsPayload {
  report: LimitedLiabilityCompanyReport
}

type UpdateLimitedLiabilityCompanyReportPayload {
  report: LimitedLiabilityCompanyReport
}

union CreateSpecialProjectError = CategoryNotFoundError | CityNotFoundError

type CreateSpecialProjectPayload {
  errors: [CreateSpecialProjectError!]
  specialProject: SpecialProject
}

type UpdateSpecialProjectDocumentsPayload {
  specialProject: SpecialProject
}

union UpdateSpecialProjectError = CategoryNotFoundError | CityNotFoundError | RequiredAmountIsLessThanCollectedAmountError

type UpdateSpecialProjectPayload {
  errors: [UpdateSpecialProjectError!]
  specialProject: SpecialProject
}

input UpdateSpecialProjectsVisibilityOrderInput {
  """Идентификаторы спецпроектов в нужном порядке"""
  ids: [SpecialProjectId!]!
}

type UpdateSpecialProjectsVisibilityOrderPayload {
  success: Boolean
}

input PublishSpecialProjectInput {
  """Идентификатор спецпроекта"""
  id: SpecialProjectId!
}

type PublishSpecialProjectPayload {
  specialProject: SpecialProject
}

input UnpublishSpecialProjectInput {
  """Идентификатор спецпроекта"""
  id: SpecialProjectId!
}

type UnpublishSpecialProjectPayload {
  specialProject: SpecialProject
}

input CloseSpecialProjectInput {
  """Идентификатор спецпроекта"""
  id: SpecialProjectId!
}

type CloseSpecialProjectPayload {
  specialProject: SpecialProject
}

type CancelSpecialProjectPayload {
  specialProject: SpecialProject
}

input SendSpecialProjectReportInput {
  """Идентификатор спецпроекта"""
  id: SpecialProjectId!
}

type SendSpecialProjectReportPayload {
  specialProject: SpecialProject
}

type CreateReferrerLinkPayload {
  link: String
}
