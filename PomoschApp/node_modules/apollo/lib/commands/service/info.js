"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const heroku_cli_util_1 = require("heroku-cli-util");
const Command_1 = require("../../Command");
class ServiceDownload extends Command_1.ProjectCommand {
    async run() {
        const { schema } = await this.runTasks(({ args, project, flags }) => [
            {
                title: `Getting information about service`,
                task: async (ctx) => {
                    if (!project.config.name) {
                        throw new Error("A service name is required but wasn't found");
                    }
                    const { data, errors } = await project.engine.schemaTagInfo({
                        tag: flags.tag,
                        service: project.config.name
                    });
                    if (errors) {
                        throw new Error(errors.map(error => error.message).join("\n"));
                    }
                    if (!(data && data.service)) {
                        throw new Error(`Error loading service information`);
                    }
                    ctx.schema = data.service.schema;
                }
            }
        ]);
        const { hash, fieldCount, typeCount, createdAt } = schema;
        this.log("\n");
        heroku_cli_util_1.table([{ hash, types: typeCount, fields: fieldCount, createdAt }], {
            columns: [
                {
                    key: "hash",
                    label: "id",
                    format: (hash) => hash.slice(0, 6)
                },
                { key: "types" },
                { key: "fields" },
                { key: "createdAt", label: "created date" }
            ]
        });
        this.log("\n");
    }
}
ServiceDownload.description = "Download the info of your service from Engine";
ServiceDownload.hidden = true;
ServiceDownload.flags = Object.assign({}, Command_1.ProjectCommand.flags, { tag: command_1.flags.string({
        char: "t",
        description: "The published tag of the schema",
        default: "current"
    }) });
exports.default = ServiceDownload;
//# sourceMappingURL=info.js.map